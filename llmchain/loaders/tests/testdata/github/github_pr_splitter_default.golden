part=0, len=1910, chunk_size=2000, md5=4485b0fe0b943f354e3ee6af8d157313, path:https://github.com/datafuselabs/databend/pull/11452
------------------------------------------------------------

--- a/src/common/storage/src/stage.rs
+++ b/src/common/storage/src/stage.rs
@@ -285,7 +285,7 @@ fn blocking_list_files_with_pattern(
 
     // path is a dir
     let mut files = Vec::new();
-    let list = operator.list(path)?;
+    let list = operator.scan(path)?;
     let mut limit = 0;
     for obj in list {
         let obj = obj?;
--- a/src/query/storages/parquet/src/deserialize_transform.rs
+++ b/src/query/storages/parquet/src/deserialize_transform.rs
@@ -384,7 +384,7 @@ impl Processor for ParquetDeserializeTransform {
 fn intervals_to_bitmap(interval: &[Interval], num_rows: usize) -> Bitmap {
     debug_assert!(
         interval.is_empty()
-            || interval.last().unwrap().start + interval.last().unwrap().length < num_rows
+            || interval.last().unwrap().start + interval.last().unwrap().length <= num_rows
     );
 
     let mut bitmap = MutableBitmap::with_capacity(num_rows);
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -871,12 +871,14 @@ dependencies = [
  "common-exception",
  "common-expression",
  "common-meta-app",
+ "common-meta-embedded",
  "ctor",
  "databend-query",
  "pyo3",
  "pyo3-build-config",
  "tokio",
  "tokio-stream",
+ "uuid",
 ]
 
 [[package]]
--- a/src/bendpy/Cargo.toml
+++ b/src/bendpy/Cargo.toml
@@ -16,6 +16,7 @@ crate-type = ["cdylib"]
 
 [dependencies]
 pyo3 = { version = "0.18.1", features = ["extension-module", "abi3", "abi3-py37"] }
+uuid = { version = "1.1.2" }
 # Workspace dependencies
 arrow = { version = "37.0.0", features = ["pyarrow"] }
 arrow-schema = "37.0.0"
@@ -25,6 +26,7 @@ common-config = { path = "../query/config" }
 common-exception = { path = "../common/exception" }
 common-expression = { path = "../query/expression" }
 common-meta-app = { path = "../meta/app" }
+common-meta-embedded = { path = "../meta/embedded" }
 databend-query = { path = "../query/service", features = [
     "simd",
     "disable_initial_exec_tls",
part=1, len=1583, chunk_size=2000, md5=1c32a8c2032827f31a854561b75decff, path:https://github.com/datafuselabs/databend/pull/11452
------------------------------------------------------------
--- a/src/bendpy/README.md
+++ b/src/bendpy/README.md
@@ -10,6 +10,8 @@ pip install databend
 
 ## Usage
 
+### Basic:
+
 ```python
 from databend import SessionContext
 
@@ -22,8 +24,16 @@ df.to_py_arrow()
 
 # convert to pandas
 df.to_pandas()
+
 ```
 
+### Tenant separation:
+
+```python
+ctx = SessionContext(tenant = "a")
+```
+
+
 ## Development
 
 Setup virtualenv:
--- a/src/bendpy/src/context.rs
+++ b/src/bendpy/src/context.rs
@@ -36,19 +36,30 @@ pub(crate) struct PySessionContext {
 #[pymethods]
 impl PySessionContext {
     #[new]
-    fn new() -> PyResult<Self> {
+    #[pyo3(signature = (tenant = None))]
+    fn new(tenant: Option<&str>, py: Python) -> PyResult<Self> {
         let session = RUNTIME.block_on(async {
             let session = SessionManager::instance()
                 .create_session(SessionType::Local)
                 .await
                 .unwrap();
 
+            if let Some(tenant) = tenant {
+                session.set_current_tenant(tenant.to_owned());
+            } else {
+                session.set_current_tenant(uuid::Uuid::new_v4().to_string());
+            }
+
             let user = UserInfo::new_no_auth("root", "127.0.0.1");
             session.set_authed_user(user, None).await.unwrap();
             session
         });
 
-        Ok(PySessionContext { session })
+        let mut res = Self { session };
+
+        res.sql("CREATE DATABASE IF NOT EXISTS default", py)
+            .and_then(|df| df.collect(py))?;
+        Ok(res)
     }
 
     fn sql(&mut self, sql: &str, py: Python) -> PyResult<PyDataFrame> {
part=2, len=874, chunk_size=2000, md5=56750e896aaaa50a660c96f64ae794e1, path:https://github.com/datafuselabs/databend/pull/11452
------------------------------------------------------------
--- a/src/bendpy/src/lib.rs
+++ b/src/bendpy/src/lib.rs
@@ -21,6 +21,9 @@ mod schema;
 mod utils;
 
 use common_config::InnerConfig;
+use common_meta_app::storage::StorageFsConfig;
+use common_meta_app::storage::StorageParams;
+use common_meta_embedded::MetaEmbedded;
 use databend_query::GlobalServices;
 use pyo3::prelude::*;
 use utils::RUNTIME;
@@ -31,6 +34,13 @@ fn databend(_py: Python, m: &PyModule) -> PyResult<()> {
     RUNTIME.block_on(async {
         let mut conf: InnerConfig = InnerConfig::default();
         conf.storage.allow_insecure = true;
+        conf.storage.params = StorageParams::Fs(StorageFsConfig {
+            root: "_databend_data".to_string(),
+        });
+
+        MetaEmbedded::init_global_meta_store("_databend_meta".to_string())
+            .await
+            .unwrap();
         GlobalServices::init(conf).await.unwrap();
     });
 
part=3, len=1997, chunk_size=2000, md5=12108b3cedc866b29f8eb2a7c81e4f3f, path:https://github.com/datafuselabs/databend/pull/11452
------------------------------------------------------------
--- a/src/query/service/src/sessions/session_ctx.rs
+++ b/src/query/service/src/sessions/session_ctx.rs
@@ -28,6 +28,7 @@ use common_settings::ChangeValue;
 use common_settings::Settings;
 use parking_lot::RwLock;
 
+use super::SessionType;
 use crate::sessions::QueryContextShared;
 
 pub struct SessionContext {
@@ -56,10 +57,11 @@ pub struct SessionContext {
     // We store `query_id -> query_result_cache_key` to session context, so that we can fetch
     // query result through previous query_id easily.
     query_ids_results: RwLock<Vec<(String, Option<String>)>>,
+    typ: SessionType,
 }
 
 impl SessionContext {
-    pub fn try_create(settings: Arc<Settings>) -> Result<Arc<Self>> {
+    pub fn try_create(settings: Arc<Settings>, typ: SessionType) -> Result<Arc<Self>> {
         Ok(Arc::new(SessionContext {
             settings,
             abort: Default::default(),
@@ -73,6 +75,7 @@ impl SessionContext {
             io_shutdown_tx: Default::default(),
             query_context_shared: Default::default(),
             query_ids_results: Default::default(),
+            typ,
         }))
     }
 
@@ -147,12 +150,13 @@ impl SessionContext {
             }
         }
 
-        if conf.query.management_mode {
+        if conf.query.management_mode || self.typ == SessionType::Local {
             let lock = self.current_tenant.read();
             if !lock.is_empty() {
                 return lock.clone();
             }
         }
+
         conf.query.tenant_id.clone()
     }
 
--- a/src/query/service/src/sessions/session_mgr.rs
+++ b/src/query/service/src/sessions/session_mgr.rs
@@ -125,7 +125,7 @@ impl SessionManager {
             _ => None,
         };
 
-        let session_ctx = SessionContext::try_create(settings)?;
+        let session_ctx = SessionContext::try_create(settings, typ.clone())?;
         let session = Session::try_create(id.clone(), typ.clone(), session_ctx, mysql_conn_id)?;
 
         let mut sessions = self.active_sessions.write();
part=4, len=908, chunk_size=2000, md5=ab8d1e695004a1f32cb97efeaa2c14f6, path:https://github.com/datafuselabs/databend/pull/11453
------------------------------------------------------------
--- a/src/query/service/src/sessions/session_type.rs
+++ b/src/query/service/src/sessions/session_type.rs
@@ -14,7 +14,7 @@
 
 use std::fmt;
 
-#[derive(Clone)]
+#[derive(Clone, PartialEq)]
 pub enum SessionType {
     Clickhouse,
     MySQL,
--- a/src/query/service/tests/it/sessions/session_context.rs
+++ b/src/query/service/tests/it/sessions/session_context.rs
@@ -19,11 +19,12 @@ use common_exception::Result;
 use common_meta_app::principal::UserInfo;
 use common_settings::Settings;
 use databend_query::sessions::SessionContext;
+use databend_query::sessions::SessionType;
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_session_context() -> Result<()> {
     let settings = Settings::create("default".to_string());
-    let session_ctx = SessionContext::try_create(settings)?;
+    let session_ctx = SessionContext::try_create(settings, SessionType::MySQL)?;
 
     // Abort status.
     {
part=5, len=1518, chunk_size=2000, md5=87ed248dcda5cca50770854d2a73e444, path:https://github.com/datafuselabs/databend/pull/11453
------------------------------------------------------------
--- a/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md
+++ b/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md
@@ -7,7 +7,7 @@ description:  Decimal types are high-precision numeric values to be stored and m
 
 The Decimal type is useful for applications that require exact decimal representations, such as financial calculations or scientific computations.
 
-We can use `DECIMAL(P, S)` to indicate decimal types. 
+We can use `DECIMAL(P, S)` to indicate decimal types.
 
 - `P` is the precision, which is the total number of digits in the number, it's range is [1, 76].
 - `S` is the scale, which is the number of digits to the right of the decimal point, it's range is [0, P].
@@ -17,7 +17,7 @@ If `P` is less than 38, the physical datatype of decimal is `Decimal128`, otherw
 For a DECIMAL(P, S) data type:
 * The minimum value is `-10^P + 1` divided by `10^S`.
 * The maximum value is `10^P - 1` divided by `10^S`.
- 
+
 If you have a `DECIMAL(10, 2)` , you can store values with up to `10 digits`, with `2 digits` to the right of the decimal point. The minimum value is `-9999999.99`, and the maximum value is `9999999.99`.
 
 ## Example
@@ -49,7 +49,7 @@ DECIMAL has a set of complex rules for precision inference. Different rules will
 
 - Multiplication: `DECIMAL(a, b) * DECIMAL(x, y) -> DECIMAL(a + x, b + y)`.
 
-- Division: `DECIMAL(a, b) / DECIMAL(x, y) -> DECIMAL(a + y, b)`.
+- Division: `DECIMAL(a, b) / DECIMAL(x, y) -> DOUBLE`.
 
 ### Comparison Operations
 
part=6, len=1886, chunk_size=2000, md5=488dafbd5a859e11f0475ec1f3be9cbc, path:https://github.com/datafuselabs/databend/pull/11453
------------------------------------------------------------
--- a/src/query/expression/src/type_check.rs
+++ b/src/query/expression/src/type_check.rs
@@ -30,6 +30,7 @@ use crate::types::decimal::MAX_DECIMAL256_PRECISION;
 use crate::types::DataType;
 use crate::types::DecimalDataType;
 use crate::types::Number;
+use crate::types::NumberDataType;
 use crate::AutoCastRules;
 use crate::ColumnIndex;
 use crate::ConstantFolder;
@@ -494,7 +495,8 @@ pub fn can_auto_cast_to(
             let properties = n.get_decimal_properties().unwrap();
             properties.scale <= d.scale() && properties.precision <= d.precision()
         }
-        (DataType::Decimal(_), DataType::Number(n)) if n.is_float() => true,
+        // Decimal only upcast to double
+        (DataType::Decimal(_), DataType::Number(NumberDataType::Float64)) => true,
         _ => false,
     }
 }
--- a/src/query/expression/src/types/decimal.rs
+++ b/src/query/expression/src/types/decimal.rs
@@ -678,25 +678,21 @@ impl DecimalDataType {
         other.max_precision()
     }
 
+    // is_divide will be mapped into float64
     pub fn binary_result_type(
         a: &Self,
         b: &Self,
         is_multiply: bool,
-        is_divide: bool,
         is_plus_minus: bool,
     ) -> Result<Self> {
         let mut scale = a.scale().max(b.scale());
         let mut precision = a.max_result_precision(b);
 
         let multiply_precision = a.precision() + b.precision();
-        let divide_precision = a.precision() + b.scale();
 
         if is_multiply {
             scale = a.scale() + b.scale();
             precision = precision.min(multiply_precision);
-        } else if is_divide {
-            scale = a.scale();
-            precision = precision.min(divide_precision);
         } else if is_plus_minus {
             scale = std::cmp::max(a.scale(), b.scale());
             // for addition/subtraction, we add 1 to the width to ensure we don't overflow
part=7, len=8063, chunk_size=2000, md5=8e0bb5cb05a9ea30463667de23e94548, path:https://github.com/datafuselabs/databend/pull/11453
------------------------------------------------------------
--- a/src/query/functions/src/scalars/decimal.rs
+++ b/src/query/functions/src/scalars/decimal.rs
@@ -39,17 +39,17 @@ use ethnum::i256;
 use num_traits::AsPrimitive;
 
 macro_rules! op_decimal {
-    ($a: expr, $b: expr, $ctx: expr, $return_type: expr, $op: ident, $scale_a: expr, $scale_b: expr, $is_divide: expr) => {
+    ($a: expr, $b: expr, $ctx: expr, $return_type: expr, $op: ident, $scale_a: expr, $scale_b: expr) => {
         match $return_type {
             DataType::Decimal(d) => match d {
                 DecimalDataType::Decimal128(size) => {
                     binary_decimal!(
-                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i128, Decimal128, $is_divide
+                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i128, Decimal128
                     )
                 }
                 DecimalDataType::Decimal256(size) => {
                     binary_decimal!(
-                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i256, Decimal256, $is_divide
+                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i256, Decimal256
                     )
                 }
             },
@@ -116,11 +116,10 @@ macro_rules! compare_decimal {
 }
 
 macro_rules! binary_decimal {
-    ($a: expr, $b: expr, $ctx: expr, $op: ident, $size: expr, $scale_a: expr, $scale_b: expr, $type_name: ty, $decimal_type: tt, $is_divide: expr) => {{
+    ($a: expr, $b: expr, $ctx: expr, $op: ident, $size: expr, $scale_a: expr, $scale_b: expr, $type_name: ty, $decimal_type: tt) => {{
         let scale_a = <$type_name>::e($scale_a);
         let scale_b = <$type_name>::e($scale_b);
 
-        let zero = <$type_name>::zero();
         let one = <$type_name>::one();
         let min_for_precision = <$type_name>::min_for_precision($size.precision);
         let max_for_precision = <$type_name>::max_for_precision($size.precision);
@@ -133,17 +132,12 @@ macro_rules! binary_decimal {
                 let mut result = Vec::with_capacity(buffer_a.len());
 
                 for (a, b) in buffer_a.iter().zip(buffer_b.iter()) {
-                    if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                        $ctx.set_error(result.len(), "divided by zero");
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
                         result.push(one);
                     } else {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                        result.push(t);
                     }
                 }
                 Value::Column(Column::Decimal(DecimalColumn::$decimal_type(
@@ -158,18 +152,13 @@ macro_rules! binary_decimal {
             ) => {
                 let mut result = Vec::with_capacity(buffer.len());
 
-                if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                    $ctx.set_error(result.len(), "divided by zero");
-                    result.push(one);
-                } else {
-                    for a in buffer.iter() {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                for a in buffer.iter() {
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
+                        result.push(one);
+                    } else {
+                        result.push(t);
                     }
                 }
 
@@ -186,17 +175,12 @@ macro_rules! binary_decimal {
                 let mut result = Vec::with_capacity(buffer.len());
 
                 for b in buffer.iter() {
-                    if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                        $ctx.set_error(result.len(), "divided by zero");
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
                         result.push(one);
                     } else {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                        result.push(t);
                     }
                 }
                 Value::Column(Column::Decimal(DecimalColumn::$decimal_type(
@@ -209,14 +193,9 @@ macro_rules! binary_decimal {
                 ValueRef::Scalar(ScalarRef::Decimal(DecimalScalar::$decimal_type(a, _))),
                 ValueRef::Scalar(ScalarRef::Decimal(DecimalScalar::$decimal_type(b, _))),
             ) => {
-                let mut t = zero;
-                if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                    $ctx.set_error(0, "divided by zero");
-                } else {
-                    t = (a * scale_a).$op(b) / scale_b;
-                    if t < min_for_precision || t > max_for_precision {
-                        $ctx.set_error(0, "Decimal overflow");
-                    }
+                let t = (a * scale_a).$op(b) / scale_b;
+                if t < min_for_precision || t > max_for_precision {
+                    $ctx.set_error(0, "Decimal overflow");
                 }
                 Value::Scalar(Scalar::Decimal(DecimalScalar::$decimal_type(t, $size)))
             }
@@ -293,24 +272,20 @@ macro_rules! register_decimal_binary_op {
                 DecimalDataType::from_size(args_type[1].get_decimal_properties()?).unwrap();
 
             let is_multiply = $name == "multiply";
-            let is_divide = $name == "divide";
-            let is_plus_minus = !is_multiply && !is_divide;
+            let is_plus_minus = !is_multiply;
             let return_type = DecimalDataType::binary_result_type(
                 &decimal_a,
                 &decimal_b,
                 is_multiply,
-                is_divide,
                 is_plus_minus,
             )
             .ok()?;
 
-            let mut scale_a = 0;
+            let scale_a = 0;
             let mut scale_b = 0;
 
             if is_multiply {
                 scale_b = return_type.scale() as u32;
-            } else if is_divide {
-                scale_a = return_type.scale() as u32;
             }
 
             let function = Function {
@@ -343,8 +318,7 @@ macro_rules! register_decimal_binary_op {
                             &DataType::Decimal(return_type.clone()),
                             $op,
                             scale_a,
-                            scale_b,
-                            is_divide
+                            scale_b
                         )
                     }),
                 },
@@ -371,7 +345,6 @@ pub(crate) fn register_decimal_arithmetic(registry: &mut FunctionRegistry) {
     // TODO checked overflow by default
     register_decimal_binary_op!(registry, "plus", add);
     register_decimal_binary_op!(registry, "minus", sub);
-    register_decimal_binary_op!(registry, "divide", div);
     register_decimal_binary_op!(registry, "multiply", mul);
 }
 
part=8, len=2663, chunk_size=2000, md5=090716aa82719797f9a39074a3a465af, path:https://github.com/datafuselabs/databend/pull/11455
------------------------------------------------------------
--- a/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal
+++ b/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal
@@ -226,27 +226,27 @@ SELECT CAST(1.23 AS DECIMAL(76, 2)) * CAST(987654321.34 AS DECIMAL(20, 2)) AS re
 query I
 SELECT CAST(4.56 AS DECIMAL(6, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(4.56 AS DECIMAL(46, 2)) / CAST(1.23 AS DECIMAL(46, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(20, 2)) / CAST(123456789.12 AS DECIMAL(20, 2)) AS result;
 ----
-8.00
+8.000000067878
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(52, 2)) / CAST(123456789.12 AS DECIMAL(52, 2)) AS result;
 ----
-8.00
+8.000000067878
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(20, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS result;
 ----
-802970992.95
+802970992.9593496
 
 onlyif mysql
 statement error 1068
@@ -255,7 +255,7 @@ SELECT CAST(987654321.34 AS DECIMAL(76, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS res
 query I
 SELECT CAST(987654321.34 AS DECIMAL(76, 2)) / CAST(1.23 AS DECIMAL(76, 2)) AS result;
 ----
-802970992.95
+802970992.9593496
 
 ## negative
 
@@ -292,12 +292,12 @@ SELECT CAST(-1.23 AS DECIMAL(76, 2)) * CAST(-4.56 AS DECIMAL(76, 2)) AS result;
 query I
 SELECT CAST(-4.56 AS DECIMAL(6, 2)) / CAST(-1.23 AS DECIMAL(6, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(-4.56 AS DECIMAL(76, 2)) / CAST(-1.23 AS DECIMAL(76, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT MIN(CAST(-4.56 AS DECIMAL(6, 2)))
@@ -352,17 +352,17 @@ SELECT ANY(CAST(2.34 AS DECIMAL(76, 2)))
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(13,2) a , 3.1::Decimal(8,3) b);
 ----
-DECIMAL(15, 3) DECIMAL(15, 3) DECIMAL(21, 5) DECIMAL(16, 2)
+DECIMAL(15, 3) DECIMAL(15, 3) DECIMAL(21, 5) DOUBLE
 
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(76,2) a , 3.1::Decimal(76,3) b);
 ----
-DECIMAL(76, 3) DECIMAL(76, 3) DECIMAL(76, 5) DECIMAL(76, 2)
+DECIMAL(76, 3) DECIMAL(76, 3) DECIMAL(76, 5) DOUBLE
 
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(39,2) a , 3.1::Decimal(39,3) b);
 ----
-DECIMAL(41, 3) DECIMAL(41, 3) DECIMAL(76, 5) DECIMAL(42, 2)
+DECIMAL(41, 3) DECIMAL(41, 3) DECIMAL(76, 5) DOUBLE
 
 ## compare
 
@@ -865,7 +865,7 @@ NULL
 query T
 select c1/c1 from t2 order by c1 asc
 ----
-1.00
+1.0
 NULL
 
 
@@ -896,7 +896,7 @@ query T
 select if(number=1,number+1,null)/if(number=1,(number+1)::decimal(7,2),null) from numbers(2)
 ----
 NULL
-1
+1.0
 
 
 
part=9, len=4157, chunk_size=2000, md5=59e32c63af68c95329fb33a3d906aa74, path:https://github.com/datafuselabs/databend/pull/11455
------------------------------------------------------------
--- a/src/query/functions/src/scalars/datetime.rs
+++ b/src/query/functions/src/scalars/datetime.rs
@@ -121,7 +121,8 @@ fn int64_domain_to_timestamp_domain<T: AsPrimitive<i64>>(
 }
 
 fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
-    registry.register_aliases("to_timestamp", &["to_datetime"]);
+    registry.register_aliases("to_date", &["str_to_date"]);
+    registry.register_aliases("to_timestamp", &["to_datetime", "str_to_timestamp"]);
     registry.register_aliases("try_to_timestamp", &["try_to_datetime"]);
 
     registry.register_passthrough_nullable_1_arg::<StringType, TimestampType, _, _>(
@@ -151,7 +152,7 @@ fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
     }
 
     registry.register_combine_nullable_2_arg::<StringType, StringType, TimestampType, _, _>(
-        "str_to_timestamp",
+        "to_timestamp",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<StringType, StringType, NullableType<TimestampType>>(
             |timestamp, format, output, ctx| {
@@ -179,22 +180,25 @@ fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
     );
 
     registry.register_combine_nullable_2_arg::<StringType, StringType, DateType, _, _>(
-        "str_to_date",
+        "to_date",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<StringType, StringType, NullableType<DateType>>(
-            |date, format, output, _| {
+            |date, format, output, ctx| {
                 if format.is_empty() {
                     output.push_null();
                 } else {
                     match (std::str::from_utf8(date), std::str::from_utf8(format)) {
-                        (Ok(date), Ok(format)) => {
-                            if let Ok(res) = NaiveDate::parse_from_str(date, format) {
+                        (Ok(date), Ok(format)) => match NaiveDate::parse_from_str(date, format) {
+                            Ok(res) => {
                                 output.push(res.num_days_from_ce() - EPOCH_DAYS_FROM_CE);
-                            } else {
+                            }
+                            Err(e) => {
+                                ctx.set_error(output.len(), e.to_string());
                                 output.push_null();
                             }
-                        }
-                        _ => {
+                        },
+                        (Err(e), _) | (_, Err(e)) => {
+                            ctx.set_error(output.len(), e.to_string());
                             output.push_null();
                         }
                     }
@@ -380,8 +384,9 @@ fn register_number_to_date(registry: &mut FunctionRegistry) {
 }
 
 fn register_to_string(registry: &mut FunctionRegistry) {
+    registry.register_aliases("to_string", &["date_format"]);
     registry.register_combine_nullable_2_arg::<TimestampType, StringType, StringType, _, _>(
-        "date_format",
+        "to_string",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<TimestampType, StringType, NullableType<StringType>>(
             |date, format, output, ctx| {
@@ -389,11 +394,15 @@ fn register_to_string(registry: &mut FunctionRegistry) {
                     output.push_null();
                 } else {
                     let ts = date.to_timestamp(ctx.func_ctx.tz.tz);
-                    if let Ok(format) = std::str::from_utf8(format) {
-                        let res = ts.format(format).to_string();
-                        output.push(res.as_bytes());
-                    } else {
-                        output.push_null();
+                    match std::str::from_utf8(format) {
+                        Ok(format) => {
+                            let res = ts.format(format).to_string();
+                            output.push(res.as_bytes());
+                        }
+                        Err(e) => {
+                            ctx.set_error(output.len(), e.to_string());
+                            output.push_null();
+                        }
                     }
                 }
             },
part=10, len=1186, chunk_size=2000, md5=db8b509f3d07083aed737b25b53b34be, path:https://github.com/datafuselabs/databend/pull/11457
------------------------------------------------------------
--- a/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes
+++ b/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes
@@ -894,7 +894,7 @@ statement ok
 drop table t
 
 query T
-select date_format('2022-02-02', '精彩的%Y年，美丽的%mmonth,激动の%dd');
+select to_string('2022-02-02', '精彩的%Y年，美丽的%mmonth,激动の%dd');
 ----
 精彩的2022年，美丽的02month,激动の02d
 
@@ -903,6 +903,11 @@ select str_to_date('精彩的2022年，美丽的02month,激动の02d', '精彩
 ----
 2022-02-02
 
+query T
+select to_date('精彩的2022年，美丽的02month,激动の02d', '精彩的%Y年，美丽的%mmonth,激动の%dd');
+----
+2022-02-02
+
 statement error 1001
 select date_format('', '');
 
@@ -925,6 +930,6 @@ select str_to_timestamp('2022年02月04日，8时58分59秒,时区：+0000', '%Y
 2022-02-04 08:58:59.000000
 
 query T
-select str_to_timestamp('2022年02月04日，8时58分59秒,时区：+0800', '%Y年%m月%d日，%H时%M分%S秒,时区：%z');
+select to_timestamp('2022年02月04日，8时58分59秒,时区：+0800', '%Y年%m月%d日，%H时%M分%S秒,时区：%z');
 ----
 2022-02-04 00:58:59.000000
part=11, len=1745, chunk_size=2000, md5=3916c0533adb371270deff40ca1c236b, path:https://github.com/datafuselabs/databend/pull/11457
------------------------------------------------------------
--- a/src/meta/service/src/meta_service/raftmeta.rs
+++ b/src/meta/service/src/meta_service/raftmeta.rs
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+use std::collections::BTreeMap;
 use std::collections::BTreeSet;
 use std::fmt::Debug;
 use std::net::Ipv4Addr;
@@ -98,24 +99,39 @@ use crate::Opened;
 pub struct MetaNodeStatus {
     pub id: NodeId,
 
+    /// The raft service endpoint for internal communication
     pub endpoint: String,
 
+    /// The size in bytes of the on disk data.
     pub db_size: u64,
 
+    /// Server state, one of "Follower", "Learner", "Candidate", "Leader".
     pub state: String,
 
+    /// Is this node a leader.
     pub is_leader: bool,
 
+    /// Current term.
     pub current_term: u64,
 
+    /// Last received log index
     pub last_log_index: u64,
 
+    /// Last log id that has been committed and applied to state machine.
     pub last_applied: LogId,
 
+    /// The last known leader node.
     pub leader: Option<Node>,
 
+    /// The replication state of all nodes.
+    ///
+    /// Only leader node has non-None data for this field, i.e., `is_leader` is true.
+    pub replication: Option<BTreeMap<NodeId, Option<LogId>>>,
+
+    /// Nodes that can vote in election can grant replication.
     pub voters: Vec<Node>,
 
+    /// Also known as `learner`s.
     pub non_voters: Vec<Node>,
 
     /// The last `seq` used by GenericKV sub tree.
@@ -901,6 +917,7 @@ impl MetaNode {
                 None => LogId::new(CommittedLeaderId::new(0, 0), 0),
             },
             leader,
+            replication: metrics.replication,
             voters,
             non_voters: learners,
             last_seq,
