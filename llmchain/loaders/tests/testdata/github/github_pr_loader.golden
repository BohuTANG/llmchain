part=0, len=455, md5=0206f956cb2997be0343b44a10f9a871, path:https://github.com/datafuselabs/databend/pull/11450
------------------------------------------------------------
diff --git a/src/common/storage/src/stage.rs b/src/common/storage/src/stage.rs
index 8630f83e78c..76f5f654c2d 100644
--- a/src/common/storage/src/stage.rs
+++ b/src/common/storage/src/stage.rs
@@ -285,7 +285,7 @@ fn blocking_list_files_with_pattern(
 
     // path is a dir
     let mut files = Vec::new();
-    let list = operator.list(path)?;
+    let list = operator.scan(path)?;
     let mut limit = 0;
     for obj in list {
         let obj = obj?;

part=1, len=740, md5=fb9d4529a2f57477d4c523822b48b52d, path:https://github.com/datafuselabs/databend/pull/11451
------------------------------------------------------------
diff --git a/src/query/storages/parquet/src/deserialize_transform.rs b/src/query/storages/parquet/src/deserialize_transform.rs
index 316f7f93e77..65eb6726a7f 100644
--- a/src/query/storages/parquet/src/deserialize_transform.rs
+++ b/src/query/storages/parquet/src/deserialize_transform.rs
@@ -384,7 +384,7 @@ impl Processor for ParquetDeserializeTransform {
 fn intervals_to_bitmap(interval: &[Interval], num_rows: usize) -> Bitmap {
     debug_assert!(
         interval.is_empty()
-            || interval.last().unwrap().start + interval.last().unwrap().length < num_rows
+            || interval.last().unwrap().start + interval.last().unwrap().length <= num_rows
     );
 
     let mut bitmap = MutableBitmap::with_capacity(num_rows);

part=2, len=7432, md5=033890712789348930b32d428404b50f, path:https://github.com/datafuselabs/databend/pull/11452
------------------------------------------------------------
diff --git a/Cargo.lock b/Cargo.lock
index 29a007cd1ab..0d393121819 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -871,12 +871,14 @@ dependencies = [
  "common-exception",
  "common-expression",
  "common-meta-app",
+ "common-meta-embedded",
  "ctor",
  "databend-query",
  "pyo3",
  "pyo3-build-config",
  "tokio",
  "tokio-stream",
+ "uuid",
 ]
 
 [[package]]
diff --git a/src/bendpy/Cargo.toml b/src/bendpy/Cargo.toml
index 0c922ef29e8..a9f8d870d7a 100644
--- a/src/bendpy/Cargo.toml
+++ b/src/bendpy/Cargo.toml
@@ -16,6 +16,7 @@ crate-type = ["cdylib"]
 
 [dependencies]
 pyo3 = { version = "0.18.1", features = ["extension-module", "abi3", "abi3-py37"] }
+uuid = { version = "1.1.2" }
 # Workspace dependencies
 arrow = { version = "37.0.0", features = ["pyarrow"] }
 arrow-schema = "37.0.0"
@@ -25,6 +26,7 @@ common-config = { path = "../query/config" }
 common-exception = { path = "../common/exception" }
 common-expression = { path = "../query/expression" }
 common-meta-app = { path = "../meta/app" }
+common-meta-embedded = { path = "../meta/embedded" }
 databend-query = { path = "../query/service", features = [
     "simd",
     "disable_initial_exec_tls",
diff --git a/src/bendpy/README.md b/src/bendpy/README.md
index 0e8e0729ff7..26a14d15b2d 100644
--- a/src/bendpy/README.md
+++ b/src/bendpy/README.md
@@ -10,6 +10,8 @@ pip install databend
 
 ## Usage
 
+### Basic:
+
 ```python
 from databend import SessionContext
 
@@ -22,8 +24,16 @@ df.to_py_arrow()
 
 # convert to pandas
 df.to_pandas()
+
 ```
 
+### Tenant separation:
+
+```python
+ctx = SessionContext(tenant = "a")
+```
+
+
 ## Development
 
 Setup virtualenv:
diff --git a/src/bendpy/src/context.rs b/src/bendpy/src/context.rs
index f4b17d459f6..5aa7d58c36a 100644
--- a/src/bendpy/src/context.rs
+++ b/src/bendpy/src/context.rs
@@ -36,19 +36,30 @@ pub(crate) struct PySessionContext {
 #[pymethods]
 impl PySessionContext {
     #[new]
-    fn new() -> PyResult<Self> {
+    #[pyo3(signature = (tenant = None))]
+    fn new(tenant: Option<&str>, py: Python) -> PyResult<Self> {
         let session = RUNTIME.block_on(async {
             let session = SessionManager::instance()
                 .create_session(SessionType::Local)
                 .await
                 .unwrap();
 
+            if let Some(tenant) = tenant {
+                session.set_current_tenant(tenant.to_owned());
+            } else {
+                session.set_current_tenant(uuid::Uuid::new_v4().to_string());
+            }
+
             let user = UserInfo::new_no_auth("root", "127.0.0.1");
             session.set_authed_user(user, None).await.unwrap();
             session
         });
 
-        Ok(PySessionContext { session })
+        let mut res = Self { session };
+
+        res.sql("CREATE DATABASE IF NOT EXISTS default", py)
+            .and_then(|df| df.collect(py))?;
+        Ok(res)
     }
 
     fn sql(&mut self, sql: &str, py: Python) -> PyResult<PyDataFrame> {
diff --git a/src/bendpy/src/lib.rs b/src/bendpy/src/lib.rs
index b5212e9a8c2..5a68d0bdbcd 100644
--- a/src/bendpy/src/lib.rs
+++ b/src/bendpy/src/lib.rs
@@ -21,6 +21,9 @@ mod schema;
 mod utils;
 
 use common_config::InnerConfig;
+use common_meta_app::storage::StorageFsConfig;
+use common_meta_app::storage::StorageParams;
+use common_meta_embedded::MetaEmbedded;
 use databend_query::GlobalServices;
 use pyo3::prelude::*;
 use utils::RUNTIME;
@@ -31,6 +34,13 @@ fn databend(_py: Python, m: &PyModule) -> PyResult<()> {
     RUNTIME.block_on(async {
         let mut conf: InnerConfig = InnerConfig::default();
         conf.storage.allow_insecure = true;
+        conf.storage.params = StorageParams::Fs(StorageFsConfig {
+            root: "_databend_data".to_string(),
+        });
+
+        MetaEmbedded::init_global_meta_store("_databend_meta".to_string())
+            .await
+            .unwrap();
         GlobalServices::init(conf).await.unwrap();
     });
 
diff --git a/src/query/service/src/sessions/session_ctx.rs b/src/query/service/src/sessions/session_ctx.rs
index 07dd40c7169..02c89b7fcbf 100644
--- a/src/query/service/src/sessions/session_ctx.rs
+++ b/src/query/service/src/sessions/session_ctx.rs
@@ -28,6 +28,7 @@ use common_settings::ChangeValue;
 use common_settings::Settings;
 use parking_lot::RwLock;
 
+use super::SessionType;
 use crate::sessions::QueryContextShared;
 
 pub struct SessionContext {
@@ -56,10 +57,11 @@ pub struct SessionContext {
     // We store `query_id -> query_result_cache_key` to session context, so that we can fetch
     // query result through previous query_id easily.
     query_ids_results: RwLock<Vec<(String, Option<String>)>>,
+    typ: SessionType,
 }
 
 impl SessionContext {
-    pub fn try_create(settings: Arc<Settings>) -> Result<Arc<Self>> {
+    pub fn try_create(settings: Arc<Settings>, typ: SessionType) -> Result<Arc<Self>> {
         Ok(Arc::new(SessionContext {
             settings,
             abort: Default::default(),
@@ -73,6 +75,7 @@ impl SessionContext {
             io_shutdown_tx: Default::default(),
             query_context_shared: Default::default(),
             query_ids_results: Default::default(),
+            typ,
         }))
     }
 
@@ -147,12 +150,13 @@ impl SessionContext {
             }
         }
 
-        if conf.query.management_mode {
+        if conf.query.management_mode || self.typ == SessionType::Local {
             let lock = self.current_tenant.read();
             if !lock.is_empty() {
                 return lock.clone();
             }
         }
+
         conf.query.tenant_id.clone()
     }
 
diff --git a/src/query/service/src/sessions/session_mgr.rs b/src/query/service/src/sessions/session_mgr.rs
index f709e124839..e9db415bd6f 100644
--- a/src/query/service/src/sessions/session_mgr.rs
+++ b/src/query/service/src/sessions/session_mgr.rs
@@ -125,7 +125,7 @@ impl SessionManager {
             _ => None,
         };
 
-        let session_ctx = SessionContext::try_create(settings)?;
+        let session_ctx = SessionContext::try_create(settings, typ.clone())?;
         let session = Session::try_create(id.clone(), typ.clone(), session_ctx, mysql_conn_id)?;
 
         let mut sessions = self.active_sessions.write();
diff --git a/src/query/service/src/sessions/session_type.rs b/src/query/service/src/sessions/session_type.rs
index 5a603a337c3..053740b3338 100644
--- a/src/query/service/src/sessions/session_type.rs
+++ b/src/query/service/src/sessions/session_type.rs
@@ -14,7 +14,7 @@
 
 use std::fmt;
 
-#[derive(Clone)]
+#[derive(Clone, PartialEq)]
 pub enum SessionType {
     Clickhouse,
     MySQL,
diff --git a/src/query/service/tests/it/sessions/session_context.rs b/src/query/service/tests/it/sessions/session_context.rs
index 583c3089fec..7ba9711559a 100644
--- a/src/query/service/tests/it/sessions/session_context.rs
+++ b/src/query/service/tests/it/sessions/session_context.rs
@@ -19,11 +19,12 @@ use common_exception::Result;
 use common_meta_app::principal::UserInfo;
 use common_settings::Settings;
 use databend_query::sessions::SessionContext;
+use databend_query::sessions::SessionType;
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_session_context() -> Result<()> {
     let settings = Settings::create("default".to_string());
-    let session_ctx = SessionContext::try_create(settings)?;
+    let session_ctx = SessionContext::try_create(settings, SessionType::MySQL)?;
 
     // Abort status.
     {

part=3, len=64704, md5=c5f7ea6fa0fac706021565eab8b5b198, path:https://github.com/datafuselabs/databend/pull/11453
------------------------------------------------------------
diff --git a/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md b/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md
index 486a32fbe71..e4c458ba2a4 100644
--- a/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md
+++ b/docs/doc/13-sql-reference/10-data-types/11-data-type-decimal-types.md
@@ -7,7 +7,7 @@ description:  Decimal types are high-precision numeric values to be stored and m
 
 The Decimal type is useful for applications that require exact decimal representations, such as financial calculations or scientific computations.
 
-We can use `DECIMAL(P, S)` to indicate decimal types. 
+We can use `DECIMAL(P, S)` to indicate decimal types.
 
 - `P` is the precision, which is the total number of digits in the number, it's range is [1, 76].
 - `S` is the scale, which is the number of digits to the right of the decimal point, it's range is [0, P].
@@ -17,7 +17,7 @@ If `P` is less than 38, the physical datatype of decimal is `Decimal128`, otherw
 For a DECIMAL(P, S) data type:
 * The minimum value is `-10^P + 1` divided by `10^S`.
 * The maximum value is `10^P - 1` divided by `10^S`.
- 
+
 If you have a `DECIMAL(10, 2)` , you can store values with up to `10 digits`, with `2 digits` to the right of the decimal point. The minimum value is `-9999999.99`, and the maximum value is `9999999.99`.
 
 ## Example
@@ -49,7 +49,7 @@ DECIMAL has a set of complex rules for precision inference. Different rules will
 
 - Multiplication: `DECIMAL(a, b) * DECIMAL(x, y) -> DECIMAL(a + x, b + y)`.
 
-- Division: `DECIMAL(a, b) / DECIMAL(x, y) -> DECIMAL(a + y, b)`.
+- Division: `DECIMAL(a, b) / DECIMAL(x, y) -> DOUBLE`.
 
 ### Comparison Operations
 
diff --git a/src/query/expression/src/type_check.rs b/src/query/expression/src/type_check.rs
index dd1849f3bf0..88a100f5196 100755
--- a/src/query/expression/src/type_check.rs
+++ b/src/query/expression/src/type_check.rs
@@ -30,6 +30,7 @@ use crate::types::decimal::MAX_DECIMAL256_PRECISION;
 use crate::types::DataType;
 use crate::types::DecimalDataType;
 use crate::types::Number;
+use crate::types::NumberDataType;
 use crate::AutoCastRules;
 use crate::ColumnIndex;
 use crate::ConstantFolder;
@@ -494,7 +495,8 @@ pub fn can_auto_cast_to(
             let properties = n.get_decimal_properties().unwrap();
             properties.scale <= d.scale() && properties.precision <= d.precision()
         }
-        (DataType::Decimal(_), DataType::Number(n)) if n.is_float() => true,
+        // Decimal only upcast to double
+        (DataType::Decimal(_), DataType::Number(NumberDataType::Float64)) => true,
         _ => false,
     }
 }
diff --git a/src/query/expression/src/types/decimal.rs b/src/query/expression/src/types/decimal.rs
index 571034d31e7..a54db813046 100644
--- a/src/query/expression/src/types/decimal.rs
+++ b/src/query/expression/src/types/decimal.rs
@@ -678,25 +678,21 @@ impl DecimalDataType {
         other.max_precision()
     }
 
+    // is_divide will be mapped into float64
     pub fn binary_result_type(
         a: &Self,
         b: &Self,
         is_multiply: bool,
-        is_divide: bool,
         is_plus_minus: bool,
     ) -> Result<Self> {
         let mut scale = a.scale().max(b.scale());
         let mut precision = a.max_result_precision(b);
 
         let multiply_precision = a.precision() + b.precision();
-        let divide_precision = a.precision() + b.scale();
 
         if is_multiply {
             scale = a.scale() + b.scale();
             precision = precision.min(multiply_precision);
-        } else if is_divide {
-            scale = a.scale();
-            precision = precision.min(divide_precision);
         } else if is_plus_minus {
             scale = std::cmp::max(a.scale(), b.scale());
             // for addition/subtraction, we add 1 to the width to ensure we don't overflow
diff --git a/src/query/functions/src/scalars/decimal.rs b/src/query/functions/src/scalars/decimal.rs
index f44cfd0e40a..57849b7ebf8 100644
--- a/src/query/functions/src/scalars/decimal.rs
+++ b/src/query/functions/src/scalars/decimal.rs
@@ -39,17 +39,17 @@ use ethnum::i256;
 use num_traits::AsPrimitive;
 
 macro_rules! op_decimal {
-    ($a: expr, $b: expr, $ctx: expr, $return_type: expr, $op: ident, $scale_a: expr, $scale_b: expr, $is_divide: expr) => {
+    ($a: expr, $b: expr, $ctx: expr, $return_type: expr, $op: ident, $scale_a: expr, $scale_b: expr) => {
         match $return_type {
             DataType::Decimal(d) => match d {
                 DecimalDataType::Decimal128(size) => {
                     binary_decimal!(
-                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i128, Decimal128, $is_divide
+                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i128, Decimal128
                     )
                 }
                 DecimalDataType::Decimal256(size) => {
                     binary_decimal!(
-                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i256, Decimal256, $is_divide
+                        $a, $b, $ctx, $op, *size, $scale_a, $scale_b, i256, Decimal256
                     )
                 }
             },
@@ -116,11 +116,10 @@ macro_rules! compare_decimal {
 }
 
 macro_rules! binary_decimal {
-    ($a: expr, $b: expr, $ctx: expr, $op: ident, $size: expr, $scale_a: expr, $scale_b: expr, $type_name: ty, $decimal_type: tt, $is_divide: expr) => {{
+    ($a: expr, $b: expr, $ctx: expr, $op: ident, $size: expr, $scale_a: expr, $scale_b: expr, $type_name: ty, $decimal_type: tt) => {{
         let scale_a = <$type_name>::e($scale_a);
         let scale_b = <$type_name>::e($scale_b);
 
-        let zero = <$type_name>::zero();
         let one = <$type_name>::one();
         let min_for_precision = <$type_name>::min_for_precision($size.precision);
         let max_for_precision = <$type_name>::max_for_precision($size.precision);
@@ -133,17 +132,12 @@ macro_rules! binary_decimal {
                 let mut result = Vec::with_capacity(buffer_a.len());
 
                 for (a, b) in buffer_a.iter().zip(buffer_b.iter()) {
-                    if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                        $ctx.set_error(result.len(), "divided by zero");
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
                         result.push(one);
                     } else {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                        result.push(t);
                     }
                 }
                 Value::Column(Column::Decimal(DecimalColumn::$decimal_type(
@@ -158,18 +152,13 @@ macro_rules! binary_decimal {
             ) => {
                 let mut result = Vec::with_capacity(buffer.len());
 
-                if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                    $ctx.set_error(result.len(), "divided by zero");
-                    result.push(one);
-                } else {
-                    for a in buffer.iter() {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                for a in buffer.iter() {
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
+                        result.push(one);
+                    } else {
+                        result.push(t);
                     }
                 }
 
@@ -186,17 +175,12 @@ macro_rules! binary_decimal {
                 let mut result = Vec::with_capacity(buffer.len());
 
                 for b in buffer.iter() {
-                    if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                        $ctx.set_error(result.len(), "divided by zero");
+                    let t = (a * scale_a).$op(b) / scale_b;
+                    if t < min_for_precision || t > max_for_precision {
+                        $ctx.set_error(result.len(), "Decimal overflow");
                         result.push(one);
                     } else {
-                        let t = (a * scale_a).$op(b) / scale_b;
-                        if t < min_for_precision || t > max_for_precision {
-                            $ctx.set_error(result.len(), "Decimal overflow");
-                            result.push(one);
-                        } else {
-                            result.push(t);
-                        }
+                        result.push(t);
                     }
                 }
                 Value::Column(Column::Decimal(DecimalColumn::$decimal_type(
@@ -209,14 +193,9 @@ macro_rules! binary_decimal {
                 ValueRef::Scalar(ScalarRef::Decimal(DecimalScalar::$decimal_type(a, _))),
                 ValueRef::Scalar(ScalarRef::Decimal(DecimalScalar::$decimal_type(b, _))),
             ) => {
-                let mut t = zero;
-                if $is_divide && std::intrinsics::unlikely(*b == zero) {
-                    $ctx.set_error(0, "divided by zero");
-                } else {
-                    t = (a * scale_a).$op(b) / scale_b;
-                    if t < min_for_precision || t > max_for_precision {
-                        $ctx.set_error(0, "Decimal overflow");
-                    }
+                let t = (a * scale_a).$op(b) / scale_b;
+                if t < min_for_precision || t > max_for_precision {
+                    $ctx.set_error(0, "Decimal overflow");
                 }
                 Value::Scalar(Scalar::Decimal(DecimalScalar::$decimal_type(t, $size)))
             }
@@ -293,24 +272,20 @@ macro_rules! register_decimal_binary_op {
                 DecimalDataType::from_size(args_type[1].get_decimal_properties()?).unwrap();
 
             let is_multiply = $name == "multiply";
-            let is_divide = $name == "divide";
-            let is_plus_minus = !is_multiply && !is_divide;
+            let is_plus_minus = !is_multiply;
             let return_type = DecimalDataType::binary_result_type(
                 &decimal_a,
                 &decimal_b,
                 is_multiply,
-                is_divide,
                 is_plus_minus,
             )
             .ok()?;
 
-            let mut scale_a = 0;
+            let scale_a = 0;
             let mut scale_b = 0;
 
             if is_multiply {
                 scale_b = return_type.scale() as u32;
-            } else if is_divide {
-                scale_a = return_type.scale() as u32;
             }
 
             let function = Function {
@@ -343,8 +318,7 @@ macro_rules! register_decimal_binary_op {
                             &DataType::Decimal(return_type.clone()),
                             $op,
                             scale_a,
-                            scale_b,
-                            is_divide
+                            scale_b
                         )
                     }),
                 },
@@ -371,7 +345,6 @@ pub(crate) fn register_decimal_arithmetic(registry: &mut FunctionRegistry) {
     // TODO checked overflow by default
     register_decimal_binary_op!(registry, "plus", add);
     register_decimal_binary_op!(registry, "minus", sub);
-    register_decimal_binary_op!(registry, "divide", div);
     register_decimal_binary_op!(registry, "multiply", mul);
 }
 
diff --git a/src/query/functions/tests/it/scalars/testdata/arithmetic.txt b/src/query/functions/tests/it/scalars/testdata/arithmetic.txt
index f72b88d898c..f314e90b6d9 100644
--- a/src/query/functions/tests/it/scalars/testdata/arithmetic.txt
+++ b/src/query/functions/tests/it/scalars/testdata/arithmetic.txt
@@ -160,25 +160,25 @@ evaluation (internal):
 
 ast            : d + e
 raw expr       : plus(d::Float64, e::Decimal(10, 1))
-checked expr   : plus<Float64, Float32>(d, to_float32<Decimal(10, 1)>(e))
-evaluation:
-+--------+------------+----------------+----------------+
-|        | d          | e              | Output         |
-+--------+------------+----------------+----------------+
-| Type   | Float64    | Decimal(10, 1) | Float64        |
-| Domain | {-20..=30} | {3.1..=188.8}  | {-inf..=NaN}   |
-| Row 0  | 10         | 3.1            | 13.0999999046  |
-| Row 1  | -20        | 33.5           | 13.5           |
-| Row 2  | 30         | 188.8          | 218.8000030517 |
-+--------+------------+----------------+----------------+
-evaluation (internal):
-+--------+------------------------------------------------+
-| Column | Data                                           |
-+--------+------------------------------------------------+
-| d      | Float64([10, -20, 30])                         |
-| e      | Decimal128([3.1, 33.5, 188.8])                 |
-| Output | Float64([13.0999999046, 13.5, 218.8000030517]) |
-+--------+------------------------------------------------+
+checked expr   : plus<Float64, Float64>(d, to_float64<Decimal(10, 1)>(e))
+evaluation:
++--------+------------+----------------+--------------+
+|        | d          | e              | Output       |
++--------+------------+----------------+--------------+
+| Type   | Float64    | Decimal(10, 1) | Float64      |
+| Domain | {-20..=30} | {3.1..=188.8}  | {-inf..=NaN} |
+| Row 0  | 10         | 3.1            | 13.1         |
+| Row 1  | -20        | 33.5           | 13.5         |
+| Row 2  | 30         | 188.8          | 218.8        |
++--------+------------+----------------+--------------+
+evaluation (internal):
++--------+--------------------------------+
+| Column | Data                           |
++--------+--------------------------------+
+| d      | Float64([10, -20, 30])         |
+| e      | Decimal128([3.1, 33.5, 188.8]) |
+| Output | Float64([13.1, 13.5, 218.8])   |
++--------+--------------------------------+
 
 
 ast            : d2 + e
@@ -434,25 +434,25 @@ evaluation (internal):
 
 ast            : d - e
 raw expr       : minus(d::Float64, e::Decimal(10, 1))
-checked expr   : minus<Float64, Float32>(d, to_float32<Decimal(10, 1)>(e))
-evaluation:
-+--------+------------+----------------+-----------------+
-|        | d          | e              | Output          |
-+--------+------------+----------------+-----------------+
-| Type   | Float64    | Decimal(10, 1) | Float64         |
-| Domain | {-20..=30} | {3.1..=188.8}  | {NaN..=inf}     |
-| Row 0  | 10         | 3.1            | 6.9000000953    |
-| Row 1  | -20        | 33.5           | -53.5           |
-| Row 2  | 30         | 188.8          | -158.8000030517 |
-+--------+------------+----------------+-----------------+
-evaluation (internal):
-+--------+-------------------------------------------------+
-| Column | Data                                            |
-+--------+-------------------------------------------------+
-| d      | Float64([10, -20, 30])                          |
-| e      | Decimal128([3.1, 33.5, 188.8])                  |
-| Output | Float64([6.9000000953, -53.5, -158.8000030517]) |
-+--------+-------------------------------------------------+
+checked expr   : minus<Float64, Float64>(d, to_float64<Decimal(10, 1)>(e))
+evaluation:
++--------+------------+----------------+-------------+
+|        | d          | e              | Output      |
++--------+------------+----------------+-------------+
+| Type   | Float64    | Decimal(10, 1) | Float64     |
+| Domain | {-20..=30} | {3.1..=188.8}  | {NaN..=inf} |
+| Row 0  | 10         | 3.1            | 6.9         |
+| Row 1  | -20        | 33.5           | -53.5       |
+| Row 2  | 30         | 188.8          | -158.8      |
++--------+------------+----------------+-------------+
+evaluation (internal):
++--------+--------------------------------+
+| Column | Data                           |
++--------+--------------------------------+
+| d      | Float64([10, -20, 30])         |
+| e      | Decimal128([3.1, 33.5, 188.8]) |
+| Output | Float64([6.9, -53.5, -158.8])  |
++--------+--------------------------------+
 
 
 ast            : d2 - e
@@ -686,25 +686,25 @@ evaluation (internal):
 
 ast            : d * e
 raw expr       : multiply(d::Float64, e::Decimal(10, 1))
-checked expr   : multiply<Float64, Float32>(d, to_float32<Decimal(10, 1)>(e))
-evaluation:
-+--------+------------+----------------+-----------------+
-|        | d          | e              | Output          |
-+--------+------------+----------------+-----------------+
-| Type   | Float64    | Decimal(10, 1) | Float64         |
-| Domain | {-20..=30} | {3.1..=188.8}  | {-inf..=NaN}    |
-| Row 0  | 10         | 3.1            | 30.9999990463   |
-| Row 1  | -20        | 33.5           | -670            |
-| Row 2  | 30         | 188.8          | 5664.0000915527 |
-+--------+------------+----------------+-----------------+
-evaluation (internal):
-+--------+-------------------------------------------------+
-| Column | Data                                            |
-+--------+-------------------------------------------------+
-| d      | Float64([10, -20, 30])                          |
-| e      | Decimal128([3.1, 33.5, 188.8])                  |
-| Output | Float64([30.9999990463, -670, 5664.0000915527]) |
-+--------+-------------------------------------------------+
+checked expr   : multiply<Float64, Float64>(d, to_float64<Decimal(10, 1)>(e))
+evaluation:
++--------+------------+----------------+--------------+
+|        | d          | e              | Output       |
++--------+------------+----------------+--------------+
+| Type   | Float64    | Decimal(10, 1) | Float64      |
+| Domain | {-20..=30} | {3.1..=188.8}  | {-inf..=NaN} |
+| Row 0  | 10         | 3.1            | 31           |
+| Row 1  | -20        | 33.5           | -670         |
+| Row 2  | 30         | 188.8          | 5664         |
++--------+------------+----------------+--------------+
+evaluation (internal):
++--------+--------------------------------+
+| Column | Data                           |
++--------+--------------------------------+
+| d      | Float64([10, -20, 30])         |
+| e      | Decimal128([3.1, 33.5, 188.8]) |
+| Output | Float64([31, -670, 5664])      |
++--------+--------------------------------+
 
 
 ast            : d2 * e
@@ -867,12 +867,27 @@ evaluation (internal):
 +--------+-----------------------------------------------------------------------------+
 
 
-error: 
-  --> SQL:1:3
-  |
-1 | c / 0.5
-  |   ^ divided by zero while evaluating function `divide(10, 0.5)`
-
+ast            : c / 0.5
+raw expr       : divide(c::UInt32, 0.5)
+checked expr   : divide<UInt32, Float64>(c, to_float64<Decimal(1, 1)>(0.5_d128(1,1)))
+optimized expr : divide<UInt32, Float64>(c, 0.5_f64)
+evaluation:
++--------+-----------+---------+
+|        | c         | Output  |
++--------+-----------+---------+
+| Type   | UInt32    | Float64 |
+| Domain | {10..=30} | Unknown |
+| Row 0  | 10        | 20      |
+| Row 1  | 20        | 40      |
+| Row 2  | 30        | 60      |
++--------+-----------+---------+
+evaluation (internal):
++--------+-----------------------+
+| Column | Data                  |
++--------+-----------------------+
+| c      | UInt32([10, 20, 30])  |
+| Output | Float64([20, 40, 60]) |
++--------+-----------------------+
 
 
 ast            : divide(c, b)
@@ -948,108 +963,123 @@ error:
   --> SQL:1:5
   |
 1 | 2.0 / 0
-  |     ^ divided by zero while evaluating function `divide(2.0, 0)`
+  |     ^ divided by zero while evaluating function `divide(2, 0)`
 
 
 
 ast            : c / e
 raw expr       : divide(c::UInt32, e::Decimal(10, 1))
-checked expr   : divide<UInt32, Decimal(10, 1)>(c, e)
-evaluation:
-+--------+-----------+----------------+------------------------------------------------------------------------------------+
-|        | c         | e              | Output                                                                             |
-+--------+-----------+----------------+------------------------------------------------------------------------------------+
-| Type   | UInt32    | Decimal(10, 1) | Decimal(11, 0)                                                                     |
-| Domain | {10..=30} | {3.1..=188.8}  | {-99999999999999999999999999999999999999..=99999999999999999999999999999999999999} |
-| Row 0  | 10        | 3.1            | 3                                                                                  |
-| Row 1  | 20        | 33.5           | 0                                                                                  |
-| Row 2  | 30        | 188.8          | 0                                                                                  |
-+--------+-----------+----------------+------------------------------------------------------------------------------------+
+checked expr   : divide<UInt32, Float64>(c, to_float64<Decimal(10, 1)>(e))
+evaluation:
++--------+-----------+----------------+--------------+
+|        | c         | e              | Output       |
++--------+-----------+----------------+--------------+
+| Type   | UInt32    | Decimal(10, 1) | Float64      |
+| Domain | {10..=30} | {3.1..=188.8}  | Unknown      |
+| Row 0  | 10        | 3.1            | 3.2258064516 |
+| Row 1  | 20        | 33.5           | 0.5970149253 |
+| Row 2  | 30        | 188.8          | 0.158898305  |
++--------+-----------+----------------+--------------+
 evaluation (internal):
-+--------+--------------------------------+
-| Column | Data                           |
-+--------+--------------------------------+
-| c      | UInt32([10, 20, 30])           |
-| e      | Decimal128([3.1, 33.5, 188.8]) |
-| Output | Decimal128([3, 0, 0])          |
-+--------+--------------------------------+
++--------+----------------------------------------------------+
+| Column | Data                                               |
++--------+----------------------------------------------------+
+| c      | UInt32([10, 20, 30])                               |
+| e      | Decimal128([3.1, 33.5, 188.8])                     |
+| Output | Float64([3.2258064516, 0.5970149253, 0.158898305]) |
++--------+----------------------------------------------------+
 
 
 ast            : d / e
 raw expr       : divide(d::Float64, e::Decimal(10, 1))
-checked expr   : divide<Float64, Float32>(d, to_float32<Decimal(10, 1)>(e))
+checked expr   : divide<Float64, Float64>(d, to_float64<Decimal(10, 1)>(e))
 evaluation:
 +--------+------------+----------------+---------------+
 |        | d          | e              | Output        |
 +--------+------------+----------------+---------------+
 | Type   | Float64    | Decimal(10, 1) | Float64       |
 | Domain | {-20..=30} | {3.1..=188.8}  | Unknown       |
-| Row 0  | 10         | 3.1            | 3.2258065508  |
+| Row 0  | 10         | 3.1            | 3.2258064516  |
 | Row 1  | -20        | 33.5           | -0.5970149253 |
-| Row 2  | 30         | 188.8          | 0.1588983025  |
+| Row 2  | 30         | 188.8          | 0.158898305   |
 +--------+------------+----------------+---------------+
 evaluation (internal):
-+--------+------------------------------------------------------+
-| Column | Data                                                 |
-+--------+------------------------------------------------------+
-| d      | Float64([10, -20, 30])                               |
-| e      | Decimal128([3.1, 33.5, 188.8])                       |
-| Output | Float64([3.2258065508, -0.5970149253, 0.1588983025]) |
-+--------+------------------------------------------------------+
++--------+-----------------------------------------------------+
+| Column | Data                                                |
++--------+-----------------------------------------------------+
+| d      | Float64([10, -20, 30])                              |
+| e      | Decimal128([3.1, 33.5, 188.8])                      |
+| Output | Float64([3.2258064516, -0.5970149253, 0.158898305]) |
++--------+-----------------------------------------------------+
 
 
 ast            : d2 / e
 raw expr       : divide(d2::UInt8 NULL, e::Decimal(10, 1))
-checked expr   : divide<UInt8 NULL, Decimal(10, 1) NULL>(d2, CAST(e AS Decimal(10, 1) NULL))
-evaluation:
-+--------+------------------+----------------+---------------------------------------------------------------------------------------------+
-|        | d2               | e              | Output                                                                                      |
-+--------+------------------+----------------+---------------------------------------------------------------------------------------------+
-| Type   | UInt8 NULL       | Decimal(10, 1) | Decimal(4, 0) NULL                                                                          |
-| Domain | {0..=3} ∪ {NULL} | {3.1..=188.8}  | {-99999999999999999999999999999999999999..=99999999999999999999999999999999999999} ∪ {NULL} |
-| Row 0  | 1                | 3.1            | 0                                                                                           |
-| Row 1  | NULL             | 33.5           | NULL                                                                                        |
-| Row 2  | 3                | 188.8          | 0                                                                                           |
-+--------+------------------+----------------+---------------------------------------------------------------------------------------------+
+checked expr   : divide<UInt8 NULL, Float64 NULL>(d2, CAST(e AS Float64 NULL))
+evaluation:
++--------+------------------+----------------+--------------+
+|        | d2               | e              | Output       |
++--------+------------------+----------------+--------------+
+| Type   | UInt8 NULL       | Decimal(10, 1) | Float64 NULL |
+| Domain | {0..=3} ∪ {NULL} | {3.1..=188.8}  | Unknown      |
+| Row 0  | 1                | 3.1            | 0.3225806451 |
+| Row 1  | NULL             | 33.5           | NULL         |
+| Row 2  | 3                | 188.8          | 0.0158898305 |
++--------+------------------+----------------+--------------+
 evaluation (internal):
-+--------+--------------------------------------------------------------------------+
-| Column | Data                                                                     |
-+--------+--------------------------------------------------------------------------+
-| d2     | NullableColumn { column: UInt8([1, 0, 3]), validity: [0b_____101] }      |
-| e      | Decimal128([3.1, 33.5, 188.8])                                           |
-| Output | NullableColumn { column: Decimal128([0, 0, 0]), validity: [0b_____101] } |
-+--------+--------------------------------------------------------------------------+
-
++--------+---------------------------------------------------------------------------------------------+
+| Column | Data                                                                                        |
++--------+---------------------------------------------------------------------------------------------+
+| d2     | NullableColumn { column: UInt8([1, 0, 3]), validity: [0b_____101] }                         |
+| e      | Decimal128([3.1, 33.5, 188.8])                                                              |
+| Output | NullableColumn { column: Float64([0.3225806451, 0, 0.0158898305]), validity: [0b_____101] } |
++--------+---------------------------------------------------------------------------------------------+
 
-error: 
-  --> SQL:1:4
-  |
-1 | d2 / f
-  |    ^ divided by zero while evaluating function `divide(1, 0.50)`
 
+ast            : d2 / f
+raw expr       : divide(d2::UInt8 NULL, f::Decimal(76, 2))
+checked expr   : divide<UInt8 NULL, Float64 NULL>(d2, CAST(f AS Float64 NULL))
+evaluation:
++--------+------------------+----------------+--------------+
+|        | d2               | f              | Output       |
++--------+------------------+----------------+--------------+
+| Type   | UInt8 NULL       | Decimal(76, 2) | Float64 NULL |
+| Domain | {0..=3} ∪ {NULL} | {0.50..=12.34} | Unknown      |
+| Row 0  | 1                | 0.50           | 2            |
+| Row 1  | NULL             | 0.92           | NULL         |
+| Row 2  | 3                | 12.34          | 0.2431118314 |
++--------+------------------+----------------+--------------+
+evaluation (internal):
++--------+----------------------------------------------------------------------------------+
+| Column | Data                                                                             |
++--------+----------------------------------------------------------------------------------+
+| d2     | NullableColumn { column: UInt8([1, 0, 3]), validity: [0b_____101] }              |
+| f      | Decimal256([0.50, 0.92, 12.34])                                                  |
+| Output | NullableColumn { column: Float64([2, 0, 0.2431118314]), validity: [0b_____101] } |
++--------+----------------------------------------------------------------------------------+
 
 
 ast            : e / f
 raw expr       : divide(e::Decimal(10, 1), f::Decimal(76, 2))
-checked expr   : divide<Decimal(10, 1), Decimal(76, 2)>(e, f)
-evaluation:
-+--------+----------------+----------------+--------------------------------------------------------------------------------------+
-|        | e              | f              | Output                                                                               |
-+--------+----------------+----------------+--------------------------------------------------------------------------------------+
-| Type   | Decimal(10, 1) | Decimal(76, 2) | Decimal(12, 1)                                                                       |
-| Domain | {3.1..=188.8}  | {0.50..=12.34} | {-9999999999999999999999999999999999999.9..=9999999999999999999999999999999999999.9} |
-| Row 0  | 3.1            | 0.50           | 6.2                                                                                  |
-| Row 1  | 33.5           | 0.92           | 37.2                                                                                 |
-| Row 2  | 188.8          | 12.34          | 15.3                                                                                 |
-+--------+----------------+----------------+--------------------------------------------------------------------------------------+
-evaluation (internal):
-+--------+---------------------------------+
-| Column | Data                            |
-+--------+---------------------------------+
-| e      | Decimal128([3.1, 33.5, 188.8])  |
-| f      | Decimal256([0.50, 0.92, 12.34]) |
-| Output | Decimal128([6.2, 37.2, 15.3])   |
-+--------+---------------------------------+
+checked expr   : divide<Float64, Float64>(to_float64<Decimal(10, 1)>(e), to_float64<Decimal(76, 2)>(f))
+evaluation:
++--------+----------------+----------------+---------------+
+|        | e              | f              | Output        |
++--------+----------------+----------------+---------------+
+| Type   | Decimal(10, 1) | Decimal(76, 2) | Float64       |
+| Domain | {3.1..=188.8}  | {0.50..=12.34} | Unknown       |
+| Row 0  | 3.1            | 0.50           | 6.2           |
+| Row 1  | 33.5           | 0.92           | 36.4130434782 |
+| Row 2  | 188.8          | 12.34          | 15.2998379254 |
++--------+----------------+----------------+---------------+
+evaluation (internal):
++--------+----------------------------------------------+
+| Column | Data                                         |
++--------+----------------------------------------------+
+| e      | Decimal128([3.1, 33.5, 188.8])               |
+| f      | Decimal256([0.50, 0.92, 12.34])              |
+| Output | Float64([6.2, 36.4130434782, 15.2998379254]) |
++--------+----------------------------------------------+
 
 
 ast            : a  div b
@@ -1123,13 +1153,13 @@ evaluation (internal):
 
 ast            : c div 0.5
 raw expr       : div(c::UInt32, 0.5)
-checked expr   : div<UInt32, Float32>(c, to_float32<Decimal(1, 1)>(0.5_d128(1,1)))
-optimized expr : div<UInt32, Float32>(c, 0.5_f32)
+checked expr   : div<UInt32, Float64>(c, to_float64<Decimal(1, 1)>(0.5_d128(1,1)))
+optimized expr : div<UInt32, Float64>(c, 0.5_f64)
 evaluation:
 +--------+-----------+---------+
 |        | c         | Output  |
 +--------+-----------+---------+
-| Type   | UInt32    | Int32   |
+| Type   | UInt32    | Int64   |
 | Domain | {10..=30} | Unknown |
 | Row 0  | 10        | 20      |
 | Row 1  | 20        | 40      |
@@ -1140,7 +1170,7 @@ evaluation (internal):
 | Column | Data                 |
 +--------+----------------------+
 | c      | UInt32([10, 20, 30]) |
-| Output | Int32([20, 40, 60])  |
+| Output | Int64([20, 40, 60])  |
 +--------+----------------------+
 
 
diff --git a/src/query/functions/tests/it/scalars/testdata/comparison.txt b/src/query/functions/tests/it/scalars/testdata/comparison.txt
index 7a9077fbc0f..d30e6dc448e 100644
--- a/src/query/functions/tests/it/scalars/testdata/comparison.txt
+++ b/src/query/functions/tests/it/scalars/testdata/comparison.txt
@@ -301,7 +301,7 @@ output         : true
 
 ast            : 1.1!=1.1
 raw expr       : noteq(1.1, 1.1)
-checked expr   : noteq<Float32, Float32>(to_float32<Decimal(2, 1)>(1.1_d128(2,1)), to_float32<Decimal(2, 1)>(1.1_d128(2,1)))
+checked expr   : noteq<Float64, Float64>(to_float64<Decimal(2, 1)>(1.1_d128(2,1)), to_float64<Decimal(2, 1)>(1.1_d128(2,1)))
 optimized expr : false
 output type    : Boolean
 output domain  : {FALSE}
diff --git a/src/query/functions/tests/it/scalars/testdata/function_list.txt b/src/query/functions/tests/it/scalars/testdata/function_list.txt
index 7ba0d428927..368ff401695 100644
--- a/src/query/functions/tests/it/scalars/testdata/function_list.txt
+++ b/src/query/functions/tests/it/scalars/testdata/function_list.txt
@@ -1324,207 +1324,206 @@ Functions overloads:
 197 div(Float64 NULL, Float32 NULL) :: Int64 NULL
 198 div(Float64, Float64) :: Int64
 199 div(Float64 NULL, Float64 NULL) :: Int64 NULL
-0 divide FACTORY
-1 divide(UInt8, UInt8) :: Float64
-2 divide(UInt8 NULL, UInt8 NULL) :: Float64 NULL
-3 divide(UInt8, UInt16) :: Float64
-4 divide(UInt8 NULL, UInt16 NULL) :: Float64 NULL
-5 divide(UInt8, UInt32) :: Float64
-6 divide(UInt8 NULL, UInt32 NULL) :: Float64 NULL
-7 divide(UInt8, UInt64) :: Float64
-8 divide(UInt8 NULL, UInt64 NULL) :: Float64 NULL
-9 divide(UInt8, Int8) :: Float64
-10 divide(UInt8 NULL, Int8 NULL) :: Float64 NULL
-11 divide(UInt8, Int16) :: Float64
-12 divide(UInt8 NULL, Int16 NULL) :: Float64 NULL
-13 divide(UInt8, Int32) :: Float64
-14 divide(UInt8 NULL, Int32 NULL) :: Float64 NULL
-15 divide(UInt8, Int64) :: Float64
-16 divide(UInt8 NULL, Int64 NULL) :: Float64 NULL
-17 divide(UInt16, UInt8) :: Float64
-18 divide(UInt16 NULL, UInt8 NULL) :: Float64 NULL
-19 divide(UInt16, UInt16) :: Float64
-20 divide(UInt16 NULL, UInt16 NULL) :: Float64 NULL
-21 divide(UInt16, UInt32) :: Float64
-22 divide(UInt16 NULL, UInt32 NULL) :: Float64 NULL
-23 divide(UInt16, UInt64) :: Float64
-24 divide(UInt16 NULL, UInt64 NULL) :: Float64 NULL
-25 divide(UInt16, Int8) :: Float64
-26 divide(UInt16 NULL, Int8 NULL) :: Float64 NULL
-27 divide(UInt16, Int16) :: Float64
-28 divide(UInt16 NULL, Int16 NULL) :: Float64 NULL
-29 divide(UInt16, Int32) :: Float64
-30 divide(UInt16 NULL, Int32 NULL) :: Float64 NULL
-31 divide(UInt16, Int64) :: Float64
-32 divide(UInt16 NULL, Int64 NULL) :: Float64 NULL
-33 divide(UInt32, UInt8) :: Float64
-34 divide(UInt32 NULL, UInt8 NULL) :: Float64 NULL
-35 divide(UInt32, UInt16) :: Float64
-36 divide(UInt32 NULL, UInt16 NULL) :: Float64 NULL
-37 divide(UInt32, UInt32) :: Float64
-38 divide(UInt32 NULL, UInt32 NULL) :: Float64 NULL
-39 divide(UInt32, UInt64) :: Float64
-40 divide(UInt32 NULL, UInt64 NULL) :: Float64 NULL
-41 divide(UInt32, Int8) :: Float64
-42 divide(UInt32 NULL, Int8 NULL) :: Float64 NULL
-43 divide(UInt32, Int16) :: Float64
-44 divide(UInt32 NULL, Int16 NULL) :: Float64 NULL
-45 divide(UInt32, Int32) :: Float64
-46 divide(UInt32 NULL, Int32 NULL) :: Float64 NULL
-47 divide(UInt32, Int64) :: Float64
-48 divide(UInt32 NULL, Int64 NULL) :: Float64 NULL
-49 divide(UInt64, UInt8) :: Float64
-50 divide(UInt64 NULL, UInt8 NULL) :: Float64 NULL
-51 divide(UInt64, UInt16) :: Float64
-52 divide(UInt64 NULL, UInt16 NULL) :: Float64 NULL
-53 divide(UInt64, UInt32) :: Float64
-54 divide(UInt64 NULL, UInt32 NULL) :: Float64 NULL
-55 divide(UInt64, UInt64) :: Float64
-56 divide(UInt64 NULL, UInt64 NULL) :: Float64 NULL
-57 divide(UInt64, Int8) :: Float64
-58 divide(UInt64 NULL, Int8 NULL) :: Float64 NULL
-59 divide(UInt64, Int16) :: Float64
-60 divide(UInt64 NULL, Int16 NULL) :: Float64 NULL
-61 divide(UInt64, Int32) :: Float64
-62 divide(UInt64 NULL, Int32 NULL) :: Float64 NULL
-63 divide(UInt64, Int64) :: Float64
-64 divide(UInt64 NULL, Int64 NULL) :: Float64 NULL
-65 divide(Int8, UInt8) :: Float64
-66 divide(Int8 NULL, UInt8 NULL) :: Float64 NULL
-67 divide(Int8, UInt16) :: Float64
-68 divide(Int8 NULL, UInt16 NULL) :: Float64 NULL
-69 divide(Int8, UInt32) :: Float64
-70 divide(Int8 NULL, UInt32 NULL) :: Float64 NULL
-71 divide(Int8, UInt64) :: Float64
-72 divide(Int8 NULL, UInt64 NULL) :: Float64 NULL
-73 divide(Int8, Int8) :: Float64
-74 divide(Int8 NULL, Int8 NULL) :: Float64 NULL
-75 divide(Int8, Int16) :: Float64
-76 divide(Int8 NULL, Int16 NULL) :: Float64 NULL
-77 divide(Int8, Int32) :: Float64
-78 divide(Int8 NULL, Int32 NULL) :: Float64 NULL
-79 divide(Int8, Int64) :: Float64
-80 divide(Int8 NULL, Int64 NULL) :: Float64 NULL
-81 divide(Int16, UInt8) :: Float64
-82 divide(Int16 NULL, UInt8 NULL) :: Float64 NULL
-83 divide(Int16, UInt16) :: Float64
-84 divide(Int16 NULL, UInt16 NULL) :: Float64 NULL
-85 divide(Int16, UInt32) :: Float64
-86 divide(Int16 NULL, UInt32 NULL) :: Float64 NULL
-87 divide(Int16, UInt64) :: Float64
-88 divide(Int16 NULL, UInt64 NULL) :: Float64 NULL
-89 divide(Int16, Int8) :: Float64
-90 divide(Int16 NULL, Int8 NULL) :: Float64 NULL
-91 divide(Int16, Int16) :: Float64
-92 divide(Int16 NULL, Int16 NULL) :: Float64 NULL
-93 divide(Int16, Int32) :: Float64
-94 divide(Int16 NULL, Int32 NULL) :: Float64 NULL
-95 divide(Int16, Int64) :: Float64
-96 divide(Int16 NULL, Int64 NULL) :: Float64 NULL
-97 divide(Int32, UInt8) :: Float64
-98 divide(Int32 NULL, UInt8 NULL) :: Float64 NULL
-99 divide(Int32, UInt16) :: Float64
-100 divide(Int32 NULL, UInt16 NULL) :: Float64 NULL
-101 divide(Int32, UInt32) :: Float64
-102 divide(Int32 NULL, UInt32 NULL) :: Float64 NULL
-103 divide(Int32, UInt64) :: Float64
-104 divide(Int32 NULL, UInt64 NULL) :: Float64 NULL
-105 divide(Int32, Int8) :: Float64
-106 divide(Int32 NULL, Int8 NULL) :: Float64 NULL
-107 divide(Int32, Int16) :: Float64
-108 divide(Int32 NULL, Int16 NULL) :: Float64 NULL
-109 divide(Int32, Int32) :: Float64
-110 divide(Int32 NULL, Int32 NULL) :: Float64 NULL
-111 divide(Int32, Int64) :: Float64
-112 divide(Int32 NULL, Int64 NULL) :: Float64 NULL
-113 divide(Int64, UInt8) :: Float64
-114 divide(Int64 NULL, UInt8 NULL) :: Float64 NULL
-115 divide(Int64, UInt16) :: Float64
-116 divide(Int64 NULL, UInt16 NULL) :: Float64 NULL
-117 divide(Int64, UInt32) :: Float64
-118 divide(Int64 NULL, UInt32 NULL) :: Float64 NULL
-119 divide(Int64, UInt64) :: Float64
-120 divide(Int64 NULL, UInt64 NULL) :: Float64 NULL
-121 divide(Int64, Int8) :: Float64
-122 divide(Int64 NULL, Int8 NULL) :: Float64 NULL
-123 divide(Int64, Int16) :: Float64
-124 divide(Int64 NULL, Int16 NULL) :: Float64 NULL
-125 divide(Int64, Int32) :: Float64
-126 divide(Int64 NULL, Int32 NULL) :: Float64 NULL
-127 divide(Int64, Int64) :: Float64
-128 divide(Int64 NULL, Int64 NULL) :: Float64 NULL
-129 divide(UInt8, Float32) :: Float64
-130 divide(UInt8 NULL, Float32 NULL) :: Float64 NULL
-131 divide(UInt8, Float64) :: Float64
-132 divide(UInt8 NULL, Float64 NULL) :: Float64 NULL
-133 divide(UInt16, Float32) :: Float64
-134 divide(UInt16 NULL, Float32 NULL) :: Float64 NULL
-135 divide(UInt16, Float64) :: Float64
-136 divide(UInt16 NULL, Float64 NULL) :: Float64 NULL
-137 divide(UInt32, Float32) :: Float64
-138 divide(UInt32 NULL, Float32 NULL) :: Float64 NULL
-139 divide(UInt32, Float64) :: Float64
-140 divide(UInt32 NULL, Float64 NULL) :: Float64 NULL
-141 divide(UInt64, Float32) :: Float64
-142 divide(UInt64 NULL, Float32 NULL) :: Float64 NULL
-143 divide(UInt64, Float64) :: Float64
-144 divide(UInt64 NULL, Float64 NULL) :: Float64 NULL
-145 divide(Int8, Float32) :: Float64
-146 divide(Int8 NULL, Float32 NULL) :: Float64 NULL
-147 divide(Int8, Float64) :: Float64
-148 divide(Int8 NULL, Float64 NULL) :: Float64 NULL
-149 divide(Int16, Float32) :: Float64
-150 divide(Int16 NULL, Float32 NULL) :: Float64 NULL
-151 divide(Int16, Float64) :: Float64
-152 divide(Int16 NULL, Float64 NULL) :: Float64 NULL
-153 divide(Int32, Float32) :: Float64
-154 divide(Int32 NULL, Float32 NULL) :: Float64 NULL
-155 divide(Int32, Float64) :: Float64
-156 divide(Int32 NULL, Float64 NULL) :: Float64 NULL
-157 divide(Int64, Float32) :: Float64
-158 divide(Int64 NULL, Float32 NULL) :: Float64 NULL
-159 divide(Int64, Float64) :: Float64
-160 divide(Int64 NULL, Float64 NULL) :: Float64 NULL
-161 divide(Float32, UInt8) :: Float64
-162 divide(Float32 NULL, UInt8 NULL) :: Float64 NULL
-163 divide(Float32, UInt16) :: Float64
-164 divide(Float32 NULL, UInt16 NULL) :: Float64 NULL
-165 divide(Float32, UInt32) :: Float64
-166 divide(Float32 NULL, UInt32 NULL) :: Float64 NULL
-167 divide(Float32, UInt64) :: Float64
-168 divide(Float32 NULL, UInt64 NULL) :: Float64 NULL
-169 divide(Float32, Int8) :: Float64
-170 divide(Float32 NULL, Int8 NULL) :: Float64 NULL
-171 divide(Float32, Int16) :: Float64
-172 divide(Float32 NULL, Int16 NULL) :: Float64 NULL
-173 divide(Float32, Int32) :: Float64
-174 divide(Float32 NULL, Int32 NULL) :: Float64 NULL
-175 divide(Float32, Int64) :: Float64
-176 divide(Float32 NULL, Int64 NULL) :: Float64 NULL
-177 divide(Float64, UInt8) :: Float64
-178 divide(Float64 NULL, UInt8 NULL) :: Float64 NULL
-179 divide(Float64, UInt16) :: Float64
-180 divide(Float64 NULL, UInt16 NULL) :: Float64 NULL
-181 divide(Float64, UInt32) :: Float64
-182 divide(Float64 NULL, UInt32 NULL) :: Float64 NULL
-183 divide(Float64, UInt64) :: Float64
-184 divide(Float64 NULL, UInt64 NULL) :: Float64 NULL
-185 divide(Float64, Int8) :: Float64
-186 divide(Float64 NULL, Int8 NULL) :: Float64 NULL
-187 divide(Float64, Int16) :: Float64
-188 divide(Float64 NULL, Int16 NULL) :: Float64 NULL
-189 divide(Float64, Int32) :: Float64
-190 divide(Float64 NULL, Int32 NULL) :: Float64 NULL
-191 divide(Float64, Int64) :: Float64
-192 divide(Float64 NULL, Int64 NULL) :: Float64 NULL
-193 divide(Float32, Float32) :: Float64
-194 divide(Float32 NULL, Float32 NULL) :: Float64 NULL
-195 divide(Float32, Float64) :: Float64
-196 divide(Float32 NULL, Float64 NULL) :: Float64 NULL
-197 divide(Float64, Float32) :: Float64
-198 divide(Float64 NULL, Float32 NULL) :: Float64 NULL
-199 divide(Float64, Float64) :: Float64
-200 divide(Float64 NULL, Float64 NULL) :: Float64 NULL
+0 divide(UInt8, UInt8) :: Float64
+1 divide(UInt8 NULL, UInt8 NULL) :: Float64 NULL
+2 divide(UInt8, UInt16) :: Float64
+3 divide(UInt8 NULL, UInt16 NULL) :: Float64 NULL
+4 divide(UInt8, UInt32) :: Float64
+5 divide(UInt8 NULL, UInt32 NULL) :: Float64 NULL
+6 divide(UInt8, UInt64) :: Float64
+7 divide(UInt8 NULL, UInt64 NULL) :: Float64 NULL
+8 divide(UInt8, Int8) :: Float64
+9 divide(UInt8 NULL, Int8 NULL) :: Float64 NULL
+10 divide(UInt8, Int16) :: Float64
+11 divide(UInt8 NULL, Int16 NULL) :: Float64 NULL
+12 divide(UInt8, Int32) :: Float64
+13 divide(UInt8 NULL, Int32 NULL) :: Float64 NULL
+14 divide(UInt8, Int64) :: Float64
+15 divide(UInt8 NULL, Int64 NULL) :: Float64 NULL
+16 divide(UInt16, UInt8) :: Float64
+17 divide(UInt16 NULL, UInt8 NULL) :: Float64 NULL
+18 divide(UInt16, UInt16) :: Float64
+19 divide(UInt16 NULL, UInt16 NULL) :: Float64 NULL
+20 divide(UInt16, UInt32) :: Float64
+21 divide(UInt16 NULL, UInt32 NULL) :: Float64 NULL
+22 divide(UInt16, UInt64) :: Float64
+23 divide(UInt16 NULL, UInt64 NULL) :: Float64 NULL
+24 divide(UInt16, Int8) :: Float64
+25 divide(UInt16 NULL, Int8 NULL) :: Float64 NULL
+26 divide(UInt16, Int16) :: Float64
+27 divide(UInt16 NULL, Int16 NULL) :: Float64 NULL
+28 divide(UInt16, Int32) :: Float64
+29 divide(UInt16 NULL, Int32 NULL) :: Float64 NULL
+30 divide(UInt16, Int64) :: Float64
+31 divide(UInt16 NULL, Int64 NULL) :: Float64 NULL
+32 divide(UInt32, UInt8) :: Float64
+33 divide(UInt32 NULL, UInt8 NULL) :: Float64 NULL
+34 divide(UInt32, UInt16) :: Float64
+35 divide(UInt32 NULL, UInt16 NULL) :: Float64 NULL
+36 divide(UInt32, UInt32) :: Float64
+37 divide(UInt32 NULL, UInt32 NULL) :: Float64 NULL
+38 divide(UInt32, UInt64) :: Float64
+39 divide(UInt32 NULL, UInt64 NULL) :: Float64 NULL
+40 divide(UInt32, Int8) :: Float64
+41 divide(UInt32 NULL, Int8 NULL) :: Float64 NULL
+42 divide(UInt32, Int16) :: Float64
+43 divide(UInt32 NULL, Int16 NULL) :: Float64 NULL
+44 divide(UInt32, Int32) :: Float64
+45 divide(UInt32 NULL, Int32 NULL) :: Float64 NULL
+46 divide(UInt32, Int64) :: Float64
+47 divide(UInt32 NULL, Int64 NULL) :: Float64 NULL
+48 divide(UInt64, UInt8) :: Float64
+49 divide(UInt64 NULL, UInt8 NULL) :: Float64 NULL
+50 divide(UInt64, UInt16) :: Float64
+51 divide(UInt64 NULL, UInt16 NULL) :: Float64 NULL
+52 divide(UInt64, UInt32) :: Float64
+53 divide(UInt64 NULL, UInt32 NULL) :: Float64 NULL
+54 divide(UInt64, UInt64) :: Float64
+55 divide(UInt64 NULL, UInt64 NULL) :: Float64 NULL
+56 divide(UInt64, Int8) :: Float64
+57 divide(UInt64 NULL, Int8 NULL) :: Float64 NULL
+58 divide(UInt64, Int16) :: Float64
+59 divide(UInt64 NULL, Int16 NULL) :: Float64 NULL
+60 divide(UInt64, Int32) :: Float64
+61 divide(UInt64 NULL, Int32 NULL) :: Float64 NULL
+62 divide(UInt64, Int64) :: Float64
+63 divide(UInt64 NULL, Int64 NULL) :: Float64 NULL
+64 divide(Int8, UInt8) :: Float64
+65 divide(Int8 NULL, UInt8 NULL) :: Float64 NULL
+66 divide(Int8, UInt16) :: Float64
+67 divide(Int8 NULL, UInt16 NULL) :: Float64 NULL
+68 divide(Int8, UInt32) :: Float64
+69 divide(Int8 NULL, UInt32 NULL) :: Float64 NULL
+70 divide(Int8, UInt64) :: Float64
+71 divide(Int8 NULL, UInt64 NULL) :: Float64 NULL
+72 divide(Int8, Int8) :: Float64
+73 divide(Int8 NULL, Int8 NULL) :: Float64 NULL
+74 divide(Int8, Int16) :: Float64
+75 divide(Int8 NULL, Int16 NULL) :: Float64 NULL
+76 divide(Int8, Int32) :: Float64
+77 divide(Int8 NULL, Int32 NULL) :: Float64 NULL
+78 divide(Int8, Int64) :: Float64
+79 divide(Int8 NULL, Int64 NULL) :: Float64 NULL
+80 divide(Int16, UInt8) :: Float64
+81 divide(Int16 NULL, UInt8 NULL) :: Float64 NULL
+82 divide(Int16, UInt16) :: Float64
+83 divide(Int16 NULL, UInt16 NULL) :: Float64 NULL
+84 divide(Int16, UInt32) :: Float64
+85 divide(Int16 NULL, UInt32 NULL) :: Float64 NULL
+86 divide(Int16, UInt64) :: Float64
+87 divide(Int16 NULL, UInt64 NULL) :: Float64 NULL
+88 divide(Int16, Int8) :: Float64
+89 divide(Int16 NULL, Int8 NULL) :: Float64 NULL
+90 divide(Int16, Int16) :: Float64
+91 divide(Int16 NULL, Int16 NULL) :: Float64 NULL
+92 divide(Int16, Int32) :: Float64
+93 divide(Int16 NULL, Int32 NULL) :: Float64 NULL
+94 divide(Int16, Int64) :: Float64
+95 divide(Int16 NULL, Int64 NULL) :: Float64 NULL
+96 divide(Int32, UInt8) :: Float64
+97 divide(Int32 NULL, UInt8 NULL) :: Float64 NULL
+98 divide(Int32, UInt16) :: Float64
+99 divide(Int32 NULL, UInt16 NULL) :: Float64 NULL
+100 divide(Int32, UInt32) :: Float64
+101 divide(Int32 NULL, UInt32 NULL) :: Float64 NULL
+102 divide(Int32, UInt64) :: Float64
+103 divide(Int32 NULL, UInt64 NULL) :: Float64 NULL
+104 divide(Int32, Int8) :: Float64
+105 divide(Int32 NULL, Int8 NULL) :: Float64 NULL
+106 divide(Int32, Int16) :: Float64
+107 divide(Int32 NULL, Int16 NULL) :: Float64 NULL
+108 divide(Int32, Int32) :: Float64
+109 divide(Int32 NULL, Int32 NULL) :: Float64 NULL
+110 divide(Int32, Int64) :: Float64
+111 divide(Int32 NULL, Int64 NULL) :: Float64 NULL
+112 divide(Int64, UInt8) :: Float64
+113 divide(Int64 NULL, UInt8 NULL) :: Float64 NULL
+114 divide(Int64, UInt16) :: Float64
+115 divide(Int64 NULL, UInt16 NULL) :: Float64 NULL
+116 divide(Int64, UInt32) :: Float64
+117 divide(Int64 NULL, UInt32 NULL) :: Float64 NULL
+118 divide(Int64, UInt64) :: Float64
+119 divide(Int64 NULL, UInt64 NULL) :: Float64 NULL
+120 divide(Int64, Int8) :: Float64
+121 divide(Int64 NULL, Int8 NULL) :: Float64 NULL
+122 divide(Int64, Int16) :: Float64
+123 divide(Int64 NULL, Int16 NULL) :: Float64 NULL
+124 divide(Int64, Int32) :: Float64
+125 divide(Int64 NULL, Int32 NULL) :: Float64 NULL
+126 divide(Int64, Int64) :: Float64
+127 divide(Int64 NULL, Int64 NULL) :: Float64 NULL
+128 divide(UInt8, Float32) :: Float64
+129 divide(UInt8 NULL, Float32 NULL) :: Float64 NULL
+130 divide(UInt8, Float64) :: Float64
+131 divide(UInt8 NULL, Float64 NULL) :: Float64 NULL
+132 divide(UInt16, Float32) :: Float64
+133 divide(UInt16 NULL, Float32 NULL) :: Float64 NULL
+134 divide(UInt16, Float64) :: Float64
+135 divide(UInt16 NULL, Float64 NULL) :: Float64 NULL
+136 divide(UInt32, Float32) :: Float64
+137 divide(UInt32 NULL, Float32 NULL) :: Float64 NULL
+138 divide(UInt32, Float64) :: Float64
+139 divide(UInt32 NULL, Float64 NULL) :: Float64 NULL
+140 divide(UInt64, Float32) :: Float64
+141 divide(UInt64 NULL, Float32 NULL) :: Float64 NULL
+142 divide(UInt64, Float64) :: Float64
+143 divide(UInt64 NULL, Float64 NULL) :: Float64 NULL
+144 divide(Int8, Float32) :: Float64
+145 divide(Int8 NULL, Float32 NULL) :: Float64 NULL
+146 divide(Int8, Float64) :: Float64
+147 divide(Int8 NULL, Float64 NULL) :: Float64 NULL
+148 divide(Int16, Float32) :: Float64
+149 divide(Int16 NULL, Float32 NULL) :: Float64 NULL
+150 divide(Int16, Float64) :: Float64
+151 divide(Int16 NULL, Float64 NULL) :: Float64 NULL
+152 divide(Int32, Float32) :: Float64
+153 divide(Int32 NULL, Float32 NULL) :: Float64 NULL
+154 divide(Int32, Float64) :: Float64
+155 divide(Int32 NULL, Float64 NULL) :: Float64 NULL
+156 divide(Int64, Float32) :: Float64
+157 divide(Int64 NULL, Float32 NULL) :: Float64 NULL
+158 divide(Int64, Float64) :: Float64
+159 divide(Int64 NULL, Float64 NULL) :: Float64 NULL
+160 divide(Float32, UInt8) :: Float64
+161 divide(Float32 NULL, UInt8 NULL) :: Float64 NULL
+162 divide(Float32, UInt16) :: Float64
+163 divide(Float32 NULL, UInt16 NULL) :: Float64 NULL
+164 divide(Float32, UInt32) :: Float64
+165 divide(Float32 NULL, UInt32 NULL) :: Float64 NULL
+166 divide(Float32, UInt64) :: Float64
+167 divide(Float32 NULL, UInt64 NULL) :: Float64 NULL
+168 divide(Float32, Int8) :: Float64
+169 divide(Float32 NULL, Int8 NULL) :: Float64 NULL
+170 divide(Float32, Int16) :: Float64
+171 divide(Float32 NULL, Int16 NULL) :: Float64 NULL
+172 divide(Float32, Int32) :: Float64
+173 divide(Float32 NULL, Int32 NULL) :: Float64 NULL
+174 divide(Float32, Int64) :: Float64
+175 divide(Float32 NULL, Int64 NULL) :: Float64 NULL
+176 divide(Float64, UInt8) :: Float64
+177 divide(Float64 NULL, UInt8 NULL) :: Float64 NULL
+178 divide(Float64, UInt16) :: Float64
+179 divide(Float64 NULL, UInt16 NULL) :: Float64 NULL
+180 divide(Float64, UInt32) :: Float64
+181 divide(Float64 NULL, UInt32 NULL) :: Float64 NULL
+182 divide(Float64, UInt64) :: Float64
+183 divide(Float64 NULL, UInt64 NULL) :: Float64 NULL
+184 divide(Float64, Int8) :: Float64
+185 divide(Float64 NULL, Int8 NULL) :: Float64 NULL
+186 divide(Float64, Int16) :: Float64
+187 divide(Float64 NULL, Int16 NULL) :: Float64 NULL
+188 divide(Float64, Int32) :: Float64
+189 divide(Float64 NULL, Int32 NULL) :: Float64 NULL
+190 divide(Float64, Int64) :: Float64
+191 divide(Float64 NULL, Int64 NULL) :: Float64 NULL
+192 divide(Float32, Float32) :: Float64
+193 divide(Float32 NULL, Float32 NULL) :: Float64 NULL
+194 divide(Float32, Float64) :: Float64
+195 divide(Float32 NULL, Float64 NULL) :: Float64 NULL
+196 divide(Float64, Float32) :: Float64
+197 divide(Float64 NULL, Float32 NULL) :: Float64 NULL
+198 divide(Float64, Float64) :: Float64
+199 divide(Float64 NULL, Float64 NULL) :: Float64 NULL
 0 eq(Variant, Variant) :: Boolean
 1 eq(Variant NULL, Variant NULL) :: Boolean NULL
 2 eq(String, String) :: Boolean
diff --git a/src/query/functions/tests/it/scalars/testdata/hash.txt b/src/query/functions/tests/it/scalars/testdata/hash.txt
index 1436dc16bad..14df61111d3 100644
--- a/src/query/functions/tests/it/scalars/testdata/hash.txt
+++ b/src/query/functions/tests/it/scalars/testdata/hash.txt
@@ -188,7 +188,7 @@ output         : 10246934130793054423
 
 ast            : city64withseed('Abc',256.3)
 raw expr       : city64withseed('Abc', 256.3)
-checked expr   : city64withseed<String, Float32>("Abc", to_float32<Decimal(4, 1)>(256.3_d128(4,1)))
+checked expr   : city64withseed<String, Float64>("Abc", to_float64<Decimal(4, 1)>(256.3_d128(4,1)))
 optimized expr : 10246934130793054423_u64
 output type    : UInt64
 output domain  : {10246934130793054423..=10246934130793054423}
@@ -215,16 +215,16 @@ output         : 2939704650099116301
 
 ast            : city64withseed(1.1, 12)
 raw expr       : city64withseed(1.1, 12)
-checked expr   : city64withseed<Float32, UInt8>(to_float32<Decimal(2, 1)>(1.1_d128(2,1)), 12_u8)
-optimized expr : 14184975929553424950_u64
+checked expr   : city64withseed<Float64, UInt8>(to_float64<Decimal(2, 1)>(1.1_d128(2,1)), 12_u8)
+optimized expr : 10046394896202388363_u64
 output type    : UInt64
-output domain  : {14184975929553424950..=14184975929553424950}
-output         : 14184975929553424950
+output domain  : {10046394896202388363..=10046394896202388363}
+output         : 10046394896202388363
 
 
 ast            : city64withseed('1234567890', 12.12)
 raw expr       : city64withseed('1234567890', 12.12)
-checked expr   : city64withseed<String, Float32>("1234567890", to_float32<Decimal(4, 2)>(12.12_d128(4,2)))
+checked expr   : city64withseed<String, Float64>("1234567890", to_float64<Decimal(4, 2)>(12.12_d128(4,2)))
 optimized expr : 10660895976650300430_u64
 output type    : UInt64
 output domain  : {10660895976650300430..=10660895976650300430}
@@ -233,7 +233,7 @@ output         : 10660895976650300430
 
 ast            : city64withseed(1234567890, 12.12)
 raw expr       : city64withseed(1234567890, 12.12)
-checked expr   : city64withseed<UInt32, Float32>(1234567890_u32, to_float32<Decimal(4, 2)>(12.12_d128(4,2)))
+checked expr   : city64withseed<UInt32, Float64>(1234567890_u32, to_float64<Decimal(4, 2)>(12.12_d128(4,2)))
 optimized expr : 2939704650099116301_u64
 output type    : UInt64
 output domain  : {2939704650099116301..=2939704650099116301}
@@ -310,11 +310,11 @@ output         : 12447382539015599056
 
 ast            : siphash64(1.1)
 raw expr       : siphash64(1.1)
-checked expr   : siphash64<Float32>(to_float32<Decimal(2, 1)>(1.1_d128(2,1)))
-optimized expr : 2120135555285830191_u64
+checked expr   : siphash64<Float64>(to_float64<Decimal(2, 1)>(1.1_d128(2,1)))
+optimized expr : 14856193058643670405_u64
 output type    : UInt64
-output domain  : {2120135555285830191..=2120135555285830191}
-output         : 2120135555285830191
+output domain  : {14856193058643670405..=14856193058643670405}
+output         : 14856193058643670405
 
 
 ast            : siphash64(to_date(100000))
@@ -403,11 +403,11 @@ output         : 14922725725041217620
 
 ast            : xxhash64(1.1)
 raw expr       : xxhash64(1.1)
-checked expr   : xxhash64<Float32>(to_float32<Decimal(2, 1)>(1.1_d128(2,1)))
-optimized expr : 2344681381137403510_u64
+checked expr   : xxhash64<Float64>(to_float64<Decimal(2, 1)>(1.1_d128(2,1)))
+optimized expr : 18307966283998289030_u64
 output type    : UInt64
-output domain  : {2344681381137403510..=2344681381137403510}
-output         : 2344681381137403510
+output domain  : {18307966283998289030..=18307966283998289030}
+output         : 18307966283998289030
 
 
 ast            : xxhash64(to_date(100000))
@@ -496,11 +496,11 @@ output         : 2833116583
 
 ast            : xxhash32(1.1)
 raw expr       : xxhash32(1.1)
-checked expr   : xxhash32<Float32>(to_float32<Decimal(2, 1)>(1.1_d128(2,1)))
-optimized expr : 1309932719_u32
+checked expr   : xxhash32<Float64>(to_float64<Decimal(2, 1)>(1.1_d128(2,1)))
+optimized expr : 3252916525_u32
 output type    : UInt32
-output domain  : {1309932719..=1309932719}
-output         : 1309932719
+output domain  : {3252916525..=3252916525}
+output         : 3252916525
 
 
 ast            : xxhash32(to_date(100000))
diff --git a/src/query/functions/tests/it/scalars/testdata/math.txt b/src/query/functions/tests/it/scalars/testdata/math.txt
index 24effaa20aa..7052fd47cf0 100644
--- a/src/query/functions/tests/it/scalars/testdata/math.txt
+++ b/src/query/functions/tests/it/scalars/testdata/math.txt
@@ -202,7 +202,7 @@ output         : 5
 
 ast            : ceil(5.6)
 raw expr       : ceil(5.6)
-checked expr   : ceil<Float32>(to_float32<Decimal(2, 1)>(5.6_d128(2,1)))
+checked expr   : ceil<Float64>(to_float64<Decimal(2, 1)>(5.6_d128(2,1)))
 optimized expr : 6_f64
 output type    : Float64
 output domain  : {6..=6}
@@ -281,7 +281,7 @@ evaluation (internal):
 
 ast            : round(-1.23)
 raw expr       : round(-1.23)
-checked expr   : round<Float32>(to_float32<Decimal(3, 2)>(-1.23_d128(3,2)))
+checked expr   : round<Float64>(to_float64<Decimal(3, 2)>(-1.23_d128(3,2)))
 optimized expr : -1_f64
 output type    : Float64
 output domain  : {-1..=-1}
@@ -290,7 +290,7 @@ output         : -1
 
 ast            : round(1.298, 1)
 raw expr       : round(1.298, 1)
-checked expr   : round<Float32, Int64>(to_float32<Decimal(4, 3)>(1.298_d128(4,3)), to_int64<UInt8>(1_u8))
+checked expr   : round<Float64, Int64>(to_float64<Decimal(4, 3)>(1.298_d128(4,3)), to_int64<UInt8>(1_u8))
 optimized expr : 1.3_f64
 output type    : Float64
 output domain  : {1.3..=1.3}
@@ -299,7 +299,7 @@ output         : 1.3
 
 ast            : round(1.298, 0)
 raw expr       : round(1.298, 0)
-checked expr   : round<Float32, Int64>(to_float32<Decimal(4, 3)>(1.298_d128(4,3)), to_int64<UInt8>(0_u8))
+checked expr   : round<Float64, Int64>(to_float64<Decimal(4, 3)>(1.298_d128(4,3)), to_int64<UInt8>(0_u8))
 optimized expr : 1_f64
 output type    : Float64
 output domain  : {1..=1}
@@ -308,7 +308,7 @@ output         : 1
 
 ast            : round(23.298, -1)
 raw expr       : round(23.298, -1)
-checked expr   : round<Float32, Int64>(to_float32<Decimal(5, 3)>(23.298_d128(5,3)), to_int64<Int8>(-1_i8))
+checked expr   : round<Float64, Int64>(to_float64<Decimal(5, 3)>(23.298_d128(5,3)), to_int64<Int8>(-1_i8))
 optimized expr : 20_f64
 output type    : Float64
 output domain  : {20..=20}
@@ -317,11 +317,11 @@ output         : 20
 
 ast            : round(0.12345678901234567890123456789012345, 35)
 raw expr       : round(0.12345678901234567890123456789012345, 35)
-checked expr   : round<Float32, Int64>(to_float32<Decimal(35, 35)>(0.12345678901234567890123456789012345_d128(35,35)), to_int64<UInt8>(35_u8))
-optimized expr : 0.1234567835_f64
+checked expr   : round<Float64, Int64>(to_float64<Decimal(35, 35)>(0.12345678901234567890123456789012345_d128(35,35)), to_int64<UInt8>(35_u8))
+optimized expr : 0.123456789_f64
 output type    : Float64
-output domain  : {0.1234567835..=0.1234567835}
-output         : 0.1234567835
+output domain  : {0.123456789..=0.123456789}
+output         : 0.123456789
 
 
 ast            : round(a)
@@ -410,7 +410,7 @@ evaluation (internal):
 
 ast            : truncate(1.223, 1)
 raw expr       : truncate(1.223, 1)
-checked expr   : truncate<Float32, Int64>(to_float32<Decimal(4, 3)>(1.223_d128(4,3)), to_int64<UInt8>(1_u8))
+checked expr   : truncate<Float64, Int64>(to_float64<Decimal(4, 3)>(1.223_d128(4,3)), to_int64<UInt8>(1_u8))
 optimized expr : 1.2_f64
 output type    : Float64
 output domain  : {1.2..=1.2}
@@ -419,7 +419,7 @@ output         : 1.2
 
 ast            : truncate(1.999)
 raw expr       : truncate(1.999)
-checked expr   : truncate<Float32>(to_float32<Decimal(4, 3)>(1.999_d128(4,3)))
+checked expr   : truncate<Float64>(to_float64<Decimal(4, 3)>(1.999_d128(4,3)))
 optimized expr : 1_f64
 output type    : Float64
 output domain  : {1..=1}
@@ -428,7 +428,7 @@ output         : 1
 
 ast            : truncate(1.999, 1)
 raw expr       : truncate(1.999, 1)
-checked expr   : truncate<Float32, Int64>(to_float32<Decimal(4, 3)>(1.999_d128(4,3)), to_int64<UInt8>(1_u8))
+checked expr   : truncate<Float64, Int64>(to_float64<Decimal(4, 3)>(1.999_d128(4,3)), to_int64<UInt8>(1_u8))
 optimized expr : 1.9_f64
 output type    : Float64
 output domain  : {1.9..=1.9}
@@ -446,7 +446,7 @@ output         : 100
 
 ast            : truncate(10.28*100, 0)
 raw expr       : truncate(multiply(10.28, 100), 0)
-checked expr   : truncate<Float32, Int64>(to_float32<Decimal(7, 2)>(multiply<Decimal(4, 2), UInt8>(10.28_d128(4,2), 100_u8)), to_int64<UInt8>(0_u8))
+checked expr   : truncate<Float64, Int64>(to_float64<Decimal(7, 2)>(multiply<Decimal(4, 2), UInt8>(10.28_d128(4,2), 100_u8)), to_int64<UInt8>(0_u8))
 optimized expr : 1028_f64
 output type    : Float64
 output domain  : {1028..=1028}
diff --git a/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal b/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal
index a5ca12eb92a..670a4b28634 100644
--- a/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal
+++ b/tests/sqllogictests/suites/base/11_data_type/11_0006_data_type_decimal
@@ -226,27 +226,27 @@ SELECT CAST(1.23 AS DECIMAL(76, 2)) * CAST(987654321.34 AS DECIMAL(20, 2)) AS re
 query I
 SELECT CAST(4.56 AS DECIMAL(6, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(4.56 AS DECIMAL(46, 2)) / CAST(1.23 AS DECIMAL(46, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(20, 2)) / CAST(123456789.12 AS DECIMAL(20, 2)) AS result;
 ----
-8.00
+8.000000067878
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(52, 2)) / CAST(123456789.12 AS DECIMAL(52, 2)) AS result;
 ----
-8.00
+8.000000067878
 
 query I
 SELECT CAST(987654321.34 AS DECIMAL(20, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS result;
 ----
-802970992.95
+802970992.9593496
 
 onlyif mysql
 statement error 1068
@@ -255,7 +255,7 @@ SELECT CAST(987654321.34 AS DECIMAL(76, 2)) / CAST(1.23 AS DECIMAL(6, 2)) AS res
 query I
 SELECT CAST(987654321.34 AS DECIMAL(76, 2)) / CAST(1.23 AS DECIMAL(76, 2)) AS result;
 ----
-802970992.95
+802970992.9593496
 
 ## negative
 
@@ -292,12 +292,12 @@ SELECT CAST(-1.23 AS DECIMAL(76, 2)) * CAST(-4.56 AS DECIMAL(76, 2)) AS result;
 query I
 SELECT CAST(-4.56 AS DECIMAL(6, 2)) / CAST(-1.23 AS DECIMAL(6, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT CAST(-4.56 AS DECIMAL(76, 2)) / CAST(-1.23 AS DECIMAL(76, 2)) AS result;
 ----
-3.70
+3.7073170731707314
 
 query I
 SELECT MIN(CAST(-4.56 AS DECIMAL(6, 2)))
@@ -352,17 +352,17 @@ SELECT ANY(CAST(2.34 AS DECIMAL(76, 2)))
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(13,2) a , 3.1::Decimal(8,3) b);
 ----
-DECIMAL(15, 3) DECIMAL(15, 3) DECIMAL(21, 5) DECIMAL(16, 2)
+DECIMAL(15, 3) DECIMAL(15, 3) DECIMAL(21, 5) DOUBLE
 
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(76,2) a , 3.1::Decimal(76,3) b);
 ----
-DECIMAL(76, 3) DECIMAL(76, 3) DECIMAL(76, 5) DECIMAL(76, 2)
+DECIMAL(76, 3) DECIMAL(76, 3) DECIMAL(76, 5) DOUBLE
 
 query TTTT
 select typeof(a+b), typeof(a-b), typeof(a*b), typeof(a/b) from (select 3::Decimal(39,2) a , 3.1::Decimal(39,3) b);
 ----
-DECIMAL(41, 3) DECIMAL(41, 3) DECIMAL(76, 5) DECIMAL(42, 2)
+DECIMAL(41, 3) DECIMAL(41, 3) DECIMAL(76, 5) DOUBLE
 
 ## compare
 
@@ -865,7 +865,7 @@ NULL
 query T
 select c1/c1 from t2 order by c1 asc
 ----
-1.00
+1.0
 NULL
 
 
@@ -896,7 +896,7 @@ query T
 select if(number=1,number+1,null)/if(number=1,(number+1)::decimal(7,2),null) from numbers(2)
 ----
 NULL
-1
+1.0
 
 
 

part=4, len=9487, md5=27812ca4fb35d8d4b21af588191497bf, path:https://github.com/datafuselabs/databend/pull/11455
------------------------------------------------------------
diff --git a/src/query/functions/src/scalars/datetime.rs b/src/query/functions/src/scalars/datetime.rs
index 3f9355d71e9..067b245c5b8 100644
--- a/src/query/functions/src/scalars/datetime.rs
+++ b/src/query/functions/src/scalars/datetime.rs
@@ -121,7 +121,8 @@ fn int64_domain_to_timestamp_domain<T: AsPrimitive<i64>>(
 }
 
 fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
-    registry.register_aliases("to_timestamp", &["to_datetime"]);
+    registry.register_aliases("to_date", &["str_to_date"]);
+    registry.register_aliases("to_timestamp", &["to_datetime", "str_to_timestamp"]);
     registry.register_aliases("try_to_timestamp", &["try_to_datetime"]);
 
     registry.register_passthrough_nullable_1_arg::<StringType, TimestampType, _, _>(
@@ -151,7 +152,7 @@ fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
     }
 
     registry.register_combine_nullable_2_arg::<StringType, StringType, TimestampType, _, _>(
-        "str_to_timestamp",
+        "to_timestamp",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<StringType, StringType, NullableType<TimestampType>>(
             |timestamp, format, output, ctx| {
@@ -179,22 +180,25 @@ fn register_string_to_timestamp(registry: &mut FunctionRegistry) {
     );
 
     registry.register_combine_nullable_2_arg::<StringType, StringType, DateType, _, _>(
-        "str_to_date",
+        "to_date",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<StringType, StringType, NullableType<DateType>>(
-            |date, format, output, _| {
+            |date, format, output, ctx| {
                 if format.is_empty() {
                     output.push_null();
                 } else {
                     match (std::str::from_utf8(date), std::str::from_utf8(format)) {
-                        (Ok(date), Ok(format)) => {
-                            if let Ok(res) = NaiveDate::parse_from_str(date, format) {
+                        (Ok(date), Ok(format)) => match NaiveDate::parse_from_str(date, format) {
+                            Ok(res) => {
                                 output.push(res.num_days_from_ce() - EPOCH_DAYS_FROM_CE);
-                            } else {
+                            }
+                            Err(e) => {
+                                ctx.set_error(output.len(), e.to_string());
                                 output.push_null();
                             }
-                        }
-                        _ => {
+                        },
+                        (Err(e), _) | (_, Err(e)) => {
+                            ctx.set_error(output.len(), e.to_string());
                             output.push_null();
                         }
                     }
@@ -380,8 +384,9 @@ fn register_number_to_date(registry: &mut FunctionRegistry) {
 }
 
 fn register_to_string(registry: &mut FunctionRegistry) {
+    registry.register_aliases("to_string", &["date_format"]);
     registry.register_combine_nullable_2_arg::<TimestampType, StringType, StringType, _, _>(
-        "date_format",
+        "to_string",
         |_, _| FunctionDomain::MayThrow,
         vectorize_with_builder_2_arg::<TimestampType, StringType, NullableType<StringType>>(
             |date, format, output, ctx| {
@@ -389,11 +394,15 @@ fn register_to_string(registry: &mut FunctionRegistry) {
                     output.push_null();
                 } else {
                     let ts = date.to_timestamp(ctx.func_ctx.tz.tz);
-                    if let Ok(format) = std::str::from_utf8(format) {
-                        let res = ts.format(format).to_string();
-                        output.push(res.as_bytes());
-                    } else {
-                        output.push_null();
+                    match std::str::from_utf8(format) {
+                        Ok(format) => {
+                            let res = ts.format(format).to_string();
+                            output.push(res.as_bytes());
+                        }
+                        Err(e) => {
+                            ctx.set_error(output.len(), e.to_string());
+                            output.push_null();
+                        }
                     }
                 }
             },
diff --git a/src/query/functions/tests/it/scalars/testdata/function_list.txt b/src/query/functions/tests/it/scalars/testdata/function_list.txt
index 7ba0d428927..348397e322b 100644
--- a/src/query/functions/tests/it/scalars/testdata/function_list.txt
+++ b/src/query/functions/tests/it/scalars/testdata/function_list.txt
@@ -7,6 +7,7 @@ array_slice -> slice
 bitmap_cardinality -> bitmap_count
 ceiling -> ceil
 character_length -> char_length
+date_format -> to_string
 intdiv -> div
 ipv4_num_to_string -> inet_ntoa
 ipv4_string_to_num -> inet_aton
@@ -22,6 +23,8 @@ remove_nullable -> assume_not_null
 rlike -> regexp
 sha1 -> sha
 siphash -> siphash64
+str_to_date -> to_date
+str_to_timestamp -> to_timestamp
 substring -> substr
 substring_utf8 -> substr_utf8
 subtract -> minus
@@ -1120,8 +1123,6 @@ Functions overloads:
 1 cot(Float64 NULL) :: Float64 NULL
 0 crc32(String) :: UInt32
 1 crc32(String NULL) :: UInt32 NULL
-0 date_format(Timestamp, String) :: String NULL
-1 date_format(Timestamp NULL, String NULL) :: String NULL
 0 degrees(Float64) :: Float64
 1 degrees(Float64 NULL) :: Float64 NULL
 0 div(UInt8, UInt8) :: UInt8
@@ -2982,10 +2983,6 @@ Functions overloads:
 17 sqrt(Float32 NULL) :: Float64 NULL
 18 sqrt(Float64) :: Float64
 19 sqrt(Float64 NULL) :: Float64 NULL
-0 str_to_date(String, String) :: Date NULL
-1 str_to_date(String NULL, String NULL) :: Date NULL
-0 str_to_timestamp(String, String) :: Timestamp NULL
-1 str_to_timestamp(String NULL, String NULL) :: Timestamp NULL
 0 strcmp(String, String) :: Int8
 1 strcmp(String NULL, String NULL) :: Int8 NULL
 0 substr(String, Int64) :: String
@@ -3056,12 +3053,14 @@ Functions overloads:
 19 to_boolean(Int64 NULL) :: Boolean NULL
 0 to_date(Variant) :: Date
 1 to_date(Variant NULL) :: Date NULL
-2 to_date(String) :: Date
-3 to_date(String NULL) :: Date NULL
-4 to_date(Timestamp) :: Date
-5 to_date(Timestamp NULL) :: Date NULL
-6 to_date(Int64) :: Date
-7 to_date(Int64 NULL) :: Date NULL
+2 to_date(String, String) :: Date NULL
+3 to_date(String NULL, String NULL) :: Date NULL
+4 to_date(String) :: Date
+5 to_date(String NULL) :: Date NULL
+6 to_date(Timestamp) :: Date
+7 to_date(Timestamp NULL) :: Date NULL
+8 to_date(Int64) :: Date
+9 to_date(Int64 NULL) :: Date NULL
 0 to_day_of_month(Date) :: UInt8
 1 to_day_of_month(Date NULL) :: UInt8 NULL
 2 to_day_of_month(Timestamp) :: UInt8
@@ -3301,20 +3300,24 @@ Functions overloads:
 22 to_string(Float64 NULL) :: String NULL
 23 to_string(Boolean) :: String
 24 to_string(Boolean NULL) :: String NULL
-25 to_string(Date) :: String
-26 to_string(Date NULL) :: String NULL
-27 to_string(Timestamp) :: String
-28 to_string(Timestamp NULL) :: String NULL
-29 to_string(Bitmap) :: String
-30 to_string(Bitmap NULL) :: String NULL
+25 to_string(Timestamp, String) :: String NULL
+26 to_string(Timestamp NULL, String NULL) :: String NULL
+27 to_string(Date) :: String
+28 to_string(Date NULL) :: String NULL
+29 to_string(Timestamp) :: String
+30 to_string(Timestamp NULL) :: String NULL
+31 to_string(Bitmap) :: String
+32 to_string(Bitmap NULL) :: String NULL
 0 to_timestamp(Variant) :: Timestamp
 1 to_timestamp(Variant NULL) :: Timestamp NULL
 2 to_timestamp(String) :: Timestamp
 3 to_timestamp(String NULL) :: Timestamp NULL
-4 to_timestamp(Date) :: Timestamp
-5 to_timestamp(Date NULL) :: Timestamp NULL
-6 to_timestamp(Int64) :: Timestamp
-7 to_timestamp(Int64 NULL) :: Timestamp NULL
+4 to_timestamp(String, String) :: Timestamp NULL
+5 to_timestamp(String NULL, String NULL) :: Timestamp NULL
+6 to_timestamp(Date) :: Timestamp
+7 to_timestamp(Date NULL) :: Timestamp NULL
+8 to_timestamp(Int64) :: Timestamp
+9 to_timestamp(Int64 NULL) :: Timestamp NULL
 0 to_uint16(Variant) :: UInt16
 1 to_uint16(Variant NULL) :: UInt16 NULL
 2 to_uint16(String) :: UInt16
diff --git a/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes b/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes
index d6be12a8d12..203bf320f33 100644
--- a/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes
+++ b/tests/sqllogictests/suites/query/02_function/02_0012_function_datetimes
@@ -894,7 +894,7 @@ statement ok
 drop table t
 
 query T
-select date_format('2022-02-02', '精彩的%Y年，美丽的%mmonth,激动の%dd');
+select to_string('2022-02-02', '精彩的%Y年，美丽的%mmonth,激动の%dd');
 ----
 精彩的2022年，美丽的02month,激动の02d
 
@@ -903,6 +903,11 @@ select str_to_date('精彩的2022年，美丽的02month,激动の02d', '精彩
 ----
 2022-02-02
 
+query T
+select to_date('精彩的2022年，美丽的02month,激动の02d', '精彩的%Y年，美丽的%mmonth,激动の%dd');
+----
+2022-02-02
+
 statement error 1001
 select date_format('', '');
 
@@ -925,6 +930,6 @@ select str_to_timestamp('2022年02月04日，8时58分59秒,时区：+0000', '%Y
 2022-02-04 08:58:59.000000
 
 query T
-select str_to_timestamp('2022年02月04日，8时58分59秒,时区：+0800', '%Y年%m月%d日，%H时%M分%S秒,时区：%z');
+select to_timestamp('2022年02月04日，8时58分59秒,时区：+0800', '%Y年%m月%d日，%H时%M分%S秒,时区：%z');
 ----
 2022-02-04 00:58:59.000000

part=5, len=1891, md5=03bb9d74e518633df072ceded6cdeca3, path:https://github.com/datafuselabs/databend/pull/11457
------------------------------------------------------------
diff --git a/src/meta/service/src/meta_service/raftmeta.rs b/src/meta/service/src/meta_service/raftmeta.rs
index 24edaacb7e1..b93f5afcd4e 100644
--- a/src/meta/service/src/meta_service/raftmeta.rs
+++ b/src/meta/service/src/meta_service/raftmeta.rs
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+use std::collections::BTreeMap;
 use std::collections::BTreeSet;
 use std::fmt::Debug;
 use std::net::Ipv4Addr;
@@ -98,24 +99,39 @@ use crate::Opened;
 pub struct MetaNodeStatus {
     pub id: NodeId,
 
+    /// The raft service endpoint for internal communication
     pub endpoint: String,
 
+    /// The size in bytes of the on disk data.
     pub db_size: u64,
 
+    /// Server state, one of "Follower", "Learner", "Candidate", "Leader".
     pub state: String,
 
+    /// Is this node a leader.
     pub is_leader: bool,
 
+    /// Current term.
     pub current_term: u64,
 
+    /// Last received log index
     pub last_log_index: u64,
 
+    /// Last log id that has been committed and applied to state machine.
     pub last_applied: LogId,
 
+    /// The last known leader node.
     pub leader: Option<Node>,
 
+    /// The replication state of all nodes.
+    ///
+    /// Only leader node has non-None data for this field, i.e., `is_leader` is true.
+    pub replication: Option<BTreeMap<NodeId, Option<LogId>>>,
+
+    /// Nodes that can vote in election can grant replication.
     pub voters: Vec<Node>,
 
+    /// Also known as `learner`s.
     pub non_voters: Vec<Node>,
 
     /// The last `seq` used by GenericKV sub tree.
@@ -901,6 +917,7 @@ impl MetaNode {
                 None => LogId::new(CommittedLeaderId::new(0, 0), 0),
             },
             leader,
+            replication: metrics.replication,
             voters,
             non_voters: learners,
             last_seq,

